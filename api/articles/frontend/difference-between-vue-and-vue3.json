{"title":"带你体验Vue2和Vue3开发组件有什么区别","uid":"3d6151b8bdfcae4be7bfdc3647f80109","slug":"frontend/difference-between-vue-and-vue3","date":"2020-03-08T21:59:18.000Z","updated":"2021-03-30T13:45:00.061Z","comments":true,"path":"api/articles/frontend/difference-between-vue-and-vue3.json","excerpt":"","keywords":null,"cover":"https://img-blog.csdnimg.cn/20200308232228307.png","content":"<p>我们一直都有关注和阅读很多关于 Vue3 的新特性和功能即将到来。但是我们没有一个具体的概念在开发中会有如何的改变和不一样的体验。还有一些童鞋已经开始又慌又抓狂了 – “又要开始学新的写法了 (ノ ToT )ノ ~┻┻”。</p>\n<p>所以这里我使用 Vue2 和 Vue3 开发一个简单的表格组件来展示一下 Vue2 和 Vue3 开发组件的区别。看完这片文章后，你将会有一个概念 Vue2 和 Vue3 开发组件时的区别，并且为 Vue3 的开发之路做好准备。ღ(◔ڼ◔ღ)ミ</p>\n<p>废话少说，让我们开始吧～ (๑ •̀ㅂ•́)و✧</p>\n<hr>\n<h1 id=\"创建一个-template\"><a href=\"#创建一个-template\" class=\"headerlink\" title=\"创建一个 template\"></a>创建一个 <code>template</code></h1><p>组件来说，大多代码在 Vue2 和 Vue3 都<strong>非常相似</strong>。Vue3 支持<code>碎片(Fragments)</code>，就是说在组件可以拥有多个根节点。</p>\n<p>这种新特性可以减少很多组件之间的<code>div</code>包裹元素。在开发 vue 的时候，我们会发现每一个组件都会有个<code>div</code>元素包裹着。就会出现很多层多余的<code>div</code>元素。<code>碎片(Fragments)</code>解决了这个问题。对于有完美强迫症的童鞋“真的时太棒了”。我们这里的例子里就不展示了，用简单的单根节点的组件。</p>\n<p><strong>Vue2 表格 template</strong></p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>form-element<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span>&#123;&#123; title &#125;&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">v-model</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>username<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">placeholder</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Username<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">v-model</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">placeholder</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Password<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>login<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Submit<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>Values: &#123;&#123; username + ' ' + password &#125;&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在 Vue3 的唯一真正的不同在于数据获取。Vue3 中的<code>反应数据（Reactive Data）</code>是包含在一个<code>反应状态（Reactive State）</code>变量中。— 所以我们需要访问这个反应状态来获取数据值。</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>form-element<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span>&#123;&#123; state.title &#125;&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">v-model</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>state.username<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">placeholder</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Username<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">v-model</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>state.password<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">placeholder</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Password<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>login<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Submit<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>Values: &#123;&#123; state.username + ' ' + state.password &#125;&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h1 id=\"建立数据-data\"><a href=\"#建立数据-data\" class=\"headerlink\" title=\"建立数据 data\"></a>建立数据 <code>data</code></h1><p><strong>这里就是 Vue2 与 Vue3 最大的区别 — Vue2 使用<code>选项类型API（Options API）</code>对比 Vue3<code>合成型API（Composition API）</code></strong></p>\n<p>旧的选项型 API 在代码里分割了不同的属性（properties）：data，computed 属性，methods，等等。新的合成型 API 能让我们用方法（function）来分割，相比于旧的 API 使用属性来分组，这样代码会更加简便和整洁。</p>\n<blockquote>\n<p>现在我们来对比一下 Vue2 写法和 Vue3 写法在代码里面的区别。</p>\n</blockquote>\n<p><strong>Vue2</strong> - 这里把两个数据放入 data 属性中</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span>\n  props<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    title<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>\n      username<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n      password<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在<strong>Vue3.0</strong>，我们就需要使用一个新的<code>setup()</code>方法，此方法在组件初始化构造的时候触发。</p>\n<p>为了可以让开发者对反应型数据有更多的控制，我们可以直接使用到 Vue3 的<code>反应API（reactivity API）</code>。</p>\n<p>使用以下三步来建立<code>反应性数据</code>:</p>\n<ol>\n<li>从 vue 引入<code>reactive</code></li>\n<li>使用<code>reactive()</code>方法来声名我们的数据为反应性数据</li>\n<li>使用<code>setup()</code>方法来返回我们的反应性数据，从而我们的 template 可以获取这些反应性数据</li>\n</ol>\n<p>上一波代码，让大家更容易理解是怎么实现的。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> reactive <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span>\n  props<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    title<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> state <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n      username<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n      password<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span> state <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这里构造的反应性数据就可以被<code>template</code>使用，可以通过<code>state.username</code>和<code>state.password</code>获得数据的值。</p>\n<hr>\n<h1 id=\"Vue2-对比-Vue3-的-methods-编写\"><a href=\"#Vue2-对比-Vue3-的-methods-编写\" class=\"headerlink\" title=\"Vue2 对比 Vue3 的 methods 编写\"></a>Vue2 对比 Vue3 的 <code>methods</code> 编写</h1><p><strong>Vue2</strong> 的选项型 API 是把 methods 分割到独立的属性区域的。我们可以直接在这个属性里面添加方法来处理各种前端逻辑。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span>\n  props<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    title<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>\n      username<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n      password<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  methods<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">login</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// 登陆方法</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>Vue3</strong> 的合成型 API 里面的<code>setup()</code>方法也是可以用来操控 methods 的。创建声名方法其实和声名数据状态是一样的。— 我们需要先声名一个方法然后在<code>setup()</code>方法中<code>返回(return)</code>， 这样我们的组件内就可以调用这个方法了。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span>\n  props<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    title<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> state <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n      username<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n      password<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">login</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// 登陆方法</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>\n      login<span class=\"token punctuation\">,</span>\n      state<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h1 id=\"生命周期钩子-—-Lifecyle-Hooks\"><a href=\"#生命周期钩子-—-Lifecyle-Hooks\" class=\"headerlink\" title=\"生命周期钩子 — Lifecyle Hooks\"></a>生命周期钩子 — <code>Lifecyle Hooks</code></h1><p>在 <strong>Vue2</strong>，我们可以直接在组件属性中调用 Vue 的生命周期的钩子。以下使用一个<code>组件已挂载（mounted）</code>生命周期触发钩子。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span>\n  props<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    title<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>\n      username<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n      password<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">mounted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'组件已挂载'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  methods<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">login</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// login method</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>现在 <strong>Vue3</strong> 的合成型 API 里面的<code>setup()</code>方法可以包含了基本所有东西。生命周期的钩子就是其中之一！</p>\n<p>但是在 Vue3 生周期钩子不是全局可调用的了，需要另外从 vue 中引入。和刚刚引入<code>reactive</code>一样，生命周期的挂载钩子叫<code>onMounted</code>。</p>\n<p>引入后我们就可以在<code>setup()</code>方法里面使用<code>onMounted</code>挂载的钩子了。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> reactive<span class=\"token punctuation\">,</span> onMounted <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span>\n  props<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    title<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// ..</span>\n\n    <span class=\"token function\">onMounted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'组件已挂载'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h1 id=\"计算属性-Computed-Properties\"><a href=\"#计算属性-Computed-Properties\" class=\"headerlink\" title=\"计算属性 - Computed Properties\"></a>计算属性 - <code>Computed Properties</code></h1><p>我们一起试试添加一个计算属性来转换<code>username</code>成小写字母。</p>\n<p>在 <strong>Vue2</strong> 中实现，我们只需要在组件内的选项属性中添加即可</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// ..</span>\n  computed<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">lowerCaseUsername</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>Vue3</strong> 的设计模式给予开发者们按需引入需要使用的依赖包。这样一来就不需要多余的引用导致性能或者打包后太大的问题。Vue2 就是有这个一直存在的问题。</p>\n<p>所以在 Vue3 使用计算属性，我们先需要在组件内引入<code>computed</code>。</p>\n<p>使用方式就和<code>反应性数据（reactive data）</code>一样，在<code>state</code>中加入一个计算属性:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> reactive<span class=\"token punctuation\">,</span> onMounted<span class=\"token punctuation\">,</span> computed <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span>\n  props<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    title<span class=\"token operator\">:</span> String\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">setup</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> state <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n      username<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n      password<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n      lowerCaseUsername<span class=\"token operator\">:</span> <span class=\"token function\">computed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> state<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h1 id=\"接收-Props\"><a href=\"#接收-Props\" class=\"headerlink\" title=\"接收 Props\"></a>接收 <code>Props</code></h1><p>接收组件<code>props</code>参数传递这一块为我们带来了 Vue2 和 Vue3 之间最大的区别。<strong>—<code>this</code>在 vue3 中与 vue2 代表着完全不一样的东西。</strong></p>\n<p>在 <strong>Vue2</strong>，<code>this</code>代表的是当前组件，不是某一个特定的属性。所以我们可以直接使用<code>this</code>访问 prop 属性值。就比如下面的例子在挂载完成后打印处当前传入组件的参数<code>title</code>。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">mounted</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'title: '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>但是在 <strong>Vue3</strong> 中，<code>this</code>无法直接拿到 props 属性，emit events（触发事件）和组件内的其他属性。不过全新的<code>setup()</code>方法可以接收两个参数：</p>\n<ol>\n<li><code>props</code> - 不可变的组件参数</li>\n<li><code>context</code> - Vue3 暴露出来的属性（emit，slots，attrs）</li>\n</ol>\n<p>所以在 Vue3 接收与使用 props 就会变成这样：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">setup</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// ...</span>\n\n    <span class=\"token function\">onMounted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'title: '</span> <span class=\"token operator\">+</span> props<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h1 id=\"事件-Emitting-Events\"><a href=\"#事件-Emitting-Events\" class=\"headerlink\" title=\"事件 - Emitting Events\"></a>事件 - <code>Emitting Events</code></h1><p>在 <strong>Vue2</strong> 中自定义事件是非常直接的，但是在 <strong>Vue3</strong> 的话，我们会有更多的控制的自由度。</p>\n<p>举例，现在我们想在点击提交按钮时触发一个<code>login</code>的事件。</p>\n<p>在 <strong>Vue2</strong> 中我们会调用到<code>this.$emit</code>然后传入事件名和参数对象。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">login</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">$emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'login'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n        username<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">,</span>\n        password<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>password\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>但是在 <strong>Vue3</strong>中，我们刚刚说过<code>this</code>已经不是和 vue2 代表着这个组件了，所以我们需要不一样的自定义事件的方式。</p>\n<p>那怎么办呀？! ლಠ 益 ಠ)ლ</p>\n<p>不用慌，在<code>setup()</code>中的第二个参数<code>content</code>对象中就有<code>emit</code>，这个是和<code>this.$emit</code>是一样的。那么我们只要在<code>setup()</code>接收第二个参数中使用<strong>分解对象法</strong>取出<code>emit</code>就可以在 setup 方法中随意使用了。</p>\n<p>然后我们在<code>login</code>方法中编写登陆事件：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">setup</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> emit <span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// ...</span>\n\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">login</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'login'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n        username<span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">,</span>\n        password<span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>password\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h1 id=\"最终的-vue2-对比-vue3-代码\"><a href=\"#最终的-vue2-对比-vue3-代码\" class=\"headerlink\" title=\"最终的 vue2 对比 vue3 代码\"></a>最终的 vue2 对比 vue3 代码</h1><p><img src=\"https://img-blog.csdnimg.cn/20200308214440300.png\" alt=\"最终的vue2对比vue3代码\"></p>\n<p>真的是太棒了，能看到这里的童鞋们，你们现在基本都看到 vue2 与 vue3 其实概念与理念都是一样的。只是有一些属性获取方式和声名和定义方式稍微变了。一直在鬼哭狼嚎的小小前端开发猿人们，你们可以松一口气了吧。</p>\n<p>总结一下，我觉得 <strong>Vue3</strong> 给我们前端开发者带来了全新的开发体验，更好的使用弹性，可控度也得到了大大的提升。如果你是一个学过或者接触过 <strong>React</strong> 然后现在想使用 Vue 的话，应该特别兴奋，因为很多使用方式都和 React 非常相近了 🎉！</p>\n<p>全新的<code>合成式API（Composition API）</code>可以提升代码的解耦程度 —— 特别是大型的前端应用，效果会更加明显。还有就是按需引用的有了更细微的可控性，让项目的性能和打包大小有更好的控制。</p>\n<p>最后我把完成的 <strong>Vue2</strong> 和 <strong>Vue3</strong> 的组件代码发出来给大家：</p>\n<p><strong>Vue2</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>template<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>div <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">'form-element'</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#123;</span> title <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">'text'</span> v<span class=\"token operator\">-</span>model<span class=\"token operator\">=</span><span class=\"token string\">'username'</span> placeholder<span class=\"token operator\">=</span><span class=\"token string\">'Username'</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n\n    <span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">'password'</span> v<span class=\"token operator\">-</span>model<span class=\"token operator\">=</span><span class=\"token string\">'password'</span> placeholder<span class=\"token operator\">=</span><span class=\"token string\">'Password'</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n\n    <span class=\"token operator\">&lt;</span>button @click<span class=\"token operator\">=</span><span class=\"token string\">'login'</span><span class=\"token operator\">></span>\n      Submit\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>\n      Values<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#123;</span> username <span class=\"token operator\">+</span> <span class=\"token string\">' '</span> <span class=\"token operator\">+</span> password <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span>\n  props<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    title<span class=\"token operator\">:</span> String\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">data</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>\n      username<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n      password<span class=\"token operator\">:</span> <span class=\"token string\">''</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">mounted</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'title: '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  computed<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">lowerCaseUsername</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  methods<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">login</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">$emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'login'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n        username<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">,</span>\n        password<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>password\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>Vue3</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>template<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>div <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">'form-element'</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#123;</span> state<span class=\"token punctuation\">.</span>title <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">'text'</span> v<span class=\"token operator\">-</span>model<span class=\"token operator\">=</span><span class=\"token string\">'state.username'</span> placeholder<span class=\"token operator\">=</span><span class=\"token string\">'Username'</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n\n    <span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">'password'</span> v<span class=\"token operator\">-</span>model<span class=\"token operator\">=</span><span class=\"token string\">'state.password'</span> placeholder<span class=\"token operator\">=</span><span class=\"token string\">'Password'</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n\n    <span class=\"token operator\">&lt;</span>button @click<span class=\"token operator\">=</span><span class=\"token string\">'login'</span><span class=\"token operator\">></span>\n      Submit\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>\n      Values<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#123;</span> state<span class=\"token punctuation\">.</span>username <span class=\"token operator\">+</span> <span class=\"token string\">' '</span> <span class=\"token operator\">+</span> state<span class=\"token punctuation\">.</span>password <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> reactive<span class=\"token punctuation\">,</span> onMounted<span class=\"token punctuation\">,</span> computed <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span>\n  props<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    title<span class=\"token operator\">:</span> String\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">setup</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> emit <span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> state <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n      username<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n      password<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n      lowerCaseUsername<span class=\"token operator\">:</span> <span class=\"token function\">computed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> state<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">onMounted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'title: '</span> <span class=\"token operator\">+</span> props<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">login</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'login'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n        username<span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">,</span>\n        password<span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>password\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>\n      login<span class=\"token punctuation\">,</span>\n      state\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>希望这篇文章能让大家体验到一个比较全面的 Vue2 与 Vue3 的开发区别。如果大家还有什么问题，可以在评论中提问哦！</p>\n<p>开发愉快！～</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200321131747841.png\" alt=\"和你一起终身学习\"></p>\n","feature":null,"text":"我们一直都有关注和阅读很多关于 Vue3 的新特性和功能即将到来。但是我们没有一个具体的概念在开发中会有如何的改变和不一样的体验。还有一些童鞋已经开始又慌又抓狂了 – “又要开始学新的写法了 (ノ ToT )ノ ~┻┻”。 所以这里我使用 Vue2 和 Vue3 开发一个简单的表...","link":"","raw":"---\ntitle: 带你体验Vue2和Vue3开发组件有什么区别\ndate: 2020-03-08 21:59:18\ntags:\n  - Vue\n  - Vue3\ncategories:\n  - FrontEnd\n  - Vue\ncover: https://img-blog.csdnimg.cn/20200308232228307.png\n---\n\n我们一直都有关注和阅读很多关于 Vue3 的新特性和功能即将到来。但是我们没有一个具体的概念在开发中会有如何的改变和不一样的体验。还有一些童鞋已经开始又慌又抓狂了 -- “又要开始学新的写法了 (ノ ToT )ノ ~┻┻”。\n\n所以这里我使用 Vue2 和 Vue3 开发一个简单的表格组件来展示一下 Vue2 和 Vue3 开发组件的区别。看完这片文章后，你将会有一个概念 Vue2 和 Vue3 开发组件时的区别，并且为 Vue3 的开发之路做好准备。ღ(◔ڼ◔ღ)ミ\n\n废话少说，让我们开始吧～ (๑ •̀ㅂ•́)و✧\n\n---\n\n# 创建一个 `template`\n\n组件来说，大多代码在 Vue2 和 Vue3 都**非常相似**。Vue3 支持`碎片(Fragments)`，就是说在组件可以拥有多个根节点。\n\n这种新特性可以减少很多组件之间的`div`包裹元素。在开发 vue 的时候，我们会发现每一个组件都会有个`div`元素包裹着。就会出现很多层多余的`div`元素。`碎片(Fragments)`解决了这个问题。对于有完美强迫症的童鞋“真的时太棒了”。我们这里的例子里就不展示了，用简单的单根节点的组件。\n\n**Vue2 表格 template**\n\n```html\n<template>\n  <div class=\"form-element\">\n    <h2>{{ title }}</h2>\n    <input type=\"text\" v-model=\"username\" placeholder=\"Username\" />\n\n    <input type=\"password\" v-model=\"password\" placeholder=\"Password\" />\n\n    <button @click=\"login\">Submit</button>\n    <p>Values: {{ username + ' ' + password }}</p>\n  </div>\n</template>\n```\n\n在 Vue3 的唯一真正的不同在于数据获取。Vue3 中的`反应数据（Reactive Data）`是包含在一个`反应状态（Reactive State）`变量中。— 所以我们需要访问这个反应状态来获取数据值。\n\n```html\n<template>\n  <div class=\"form-element\">\n    <h2>{{ state.title }}</h2>\n    <input type=\"text\" v-model=\"state.username\" placeholder=\"Username\" />\n\n    <input type=\"password\" v-model=\"state.password\" placeholder=\"Password\" />\n\n    <button @click=\"login\">Submit</button>\n    <p>Values: {{ state.username + ' ' + state.password }}</p>\n  </div>\n</template>\n```\n\n---\n\n# 建立数据 `data`\n\n**这里就是 Vue2 与 Vue3 最大的区别 — Vue2 使用`选项类型API（Options API）`对比 Vue3`合成型API（Composition API）`**\n\n旧的选项型 API 在代码里分割了不同的属性（properties）：data，computed 属性，methods，等等。新的合成型 API 能让我们用方法（function）来分割，相比于旧的 API 使用属性来分组，这样代码会更加简便和整洁。\n\n> 现在我们来对比一下 Vue2 写法和 Vue3 写法在代码里面的区别。\n\n**Vue2** - 这里把两个数据放入 data 属性中\n\n```javascript\nexport default {\n  props: {\n    title: String,\n  },\n  data() {\n    return {\n      username: '',\n      password: '',\n    }\n  },\n}\n```\n\n在**Vue3.0**，我们就需要使用一个新的`setup()`方法，此方法在组件初始化构造的时候触发。\n\n为了可以让开发者对反应型数据有更多的控制，我们可以直接使用到 Vue3 的`反应API（reactivity API）`。\n\n使用以下三步来建立`反应性数据`:\n\n1. 从 vue 引入`reactive`\n2. 使用`reactive()`方法来声名我们的数据为反应性数据\n3. 使用`setup()`方法来返回我们的反应性数据，从而我们的 template 可以获取这些反应性数据\n\n上一波代码，让大家更容易理解是怎么实现的。\n\n```javascript\nimport { reactive } from 'vue'\n\nexport default {\n  props: {\n    title: String,\n  },\n  setup() {\n    const state = reactive({\n      username: '',\n      password: '',\n    })\n\n    return { state }\n  },\n}\n```\n\n这里构造的反应性数据就可以被`template`使用，可以通过`state.username`和`state.password`获得数据的值。\n\n---\n\n# Vue2 对比 Vue3 的 `methods` 编写\n\n**Vue2** 的选项型 API 是把 methods 分割到独立的属性区域的。我们可以直接在这个属性里面添加方法来处理各种前端逻辑。\n\n```javascript\nexport default {\n  props: {\n    title: String,\n  },\n  data() {\n    return {\n      username: '',\n      password: '',\n    }\n  },\n  methods: {\n    login() {\n      // 登陆方法\n    },\n  },\n}\n```\n\n**Vue3** 的合成型 API 里面的`setup()`方法也是可以用来操控 methods 的。创建声名方法其实和声名数据状态是一样的。— 我们需要先声名一个方法然后在`setup()`方法中`返回(return)`， 这样我们的组件内就可以调用这个方法了。\n\n```javascript\nexport default {\n  props: {\n    title: String,\n  },\n  setup() {\n    const state = reactive({\n      username: '',\n      password: '',\n    })\n\n    const login = () => {\n      // 登陆方法\n    }\n    return {\n      login,\n      state,\n    }\n  },\n}\n```\n\n---\n\n# 生命周期钩子 — `Lifecyle Hooks`\n\n在 **Vue2**，我们可以直接在组件属性中调用 Vue 的生命周期的钩子。以下使用一个`组件已挂载（mounted）`生命周期触发钩子。\n\n```javascript\nexport default {\n  props: {\n    title: String,\n  },\n  data() {\n    return {\n      username: '',\n      password: '',\n    }\n  },\n  mounted() {\n    console.log('组件已挂载')\n  },\n  methods: {\n    login() {\n      // login method\n    },\n  },\n}\n```\n\n现在 **Vue3** 的合成型 API 里面的`setup()`方法可以包含了基本所有东西。生命周期的钩子就是其中之一！\n\n但是在 Vue3 生周期钩子不是全局可调用的了，需要另外从 vue 中引入。和刚刚引入`reactive`一样，生命周期的挂载钩子叫`onMounted`。\n\n引入后我们就可以在`setup()`方法里面使用`onMounted`挂载的钩子了。\n\n```javascript\nimport { reactive, onMounted } from 'vue'\n\nexport default {\n  props: {\n    title: String,\n  },\n  setup() {\n    // ..\n\n    onMounted(() => {\n      console.log('组件已挂载')\n    })\n\n    // ...\n  },\n}\n```\n\n---\n\n# 计算属性 - `Computed Properties`\n\n我们一起试试添加一个计算属性来转换`username`成小写字母。\n\n在 **Vue2** 中实现，我们只需要在组件内的选项属性中添加即可\n\n```javascript\nexport default {\n  // ..\n  computed: {\n    lowerCaseUsername() {\n      return this.username.toLowerCase()\n    },\n  },\n}\n```\n\n**Vue3** 的设计模式给予开发者们按需引入需要使用的依赖包。这样一来就不需要多余的引用导致性能或者打包后太大的问题。Vue2 就是有这个一直存在的问题。\n\n所以在 Vue3 使用计算属性，我们先需要在组件内引入`computed`。\n\n使用方式就和`反应性数据（reactive data）`一样，在`state`中加入一个计算属性:\n\n```javascript\nimport { reactive, onMounted, computed } from 'vue'\n\nexport default {\n  props: {\n    title: String\n  },\n  setup () {\n    const state = reactive({\n      username: '',\n      password: '',\n      lowerCaseUsername: computed(() => state.username.toLowerCase())\n    })\n\n    // ...\n  }\n```\n\n---\n\n# 接收 `Props`\n\n接收组件`props`参数传递这一块为我们带来了 Vue2 和 Vue3 之间最大的区别。**—`this`在 vue3 中与 vue2 代表着完全不一样的东西。**\n\n在 **Vue2**，`this`代表的是当前组件，不是某一个特定的属性。所以我们可以直接使用`this`访问 prop 属性值。就比如下面的例子在挂载完成后打印处当前传入组件的参数`title`。\n\n```javascript\nmounted () {\n    console.log('title: ' + this.title)\n}\n```\n\n但是在 **Vue3** 中，`this`无法直接拿到 props 属性，emit events（触发事件）和组件内的其他属性。不过全新的`setup()`方法可以接收两个参数：\n\n1. `props` - 不可变的组件参数\n2. `context` - Vue3 暴露出来的属性（emit，slots，attrs）\n\n所以在 Vue3 接收与使用 props 就会变成这样：\n\n```javascript\nsetup (props) {\n    // ...\n\n    onMounted(() => {\n      console.log('title: ' + props.title)\n    })\n\n    // ...\n}\n```\n\n---\n\n# 事件 - `Emitting Events`\n\n在 **Vue2** 中自定义事件是非常直接的，但是在 **Vue3** 的话，我们会有更多的控制的自由度。\n\n举例，现在我们想在点击提交按钮时触发一个`login`的事件。\n\n在 **Vue2** 中我们会调用到`this.$emit`然后传入事件名和参数对象。\n\n```javascript\nlogin () {\n      this.$emit('login', {\n        username: this.username,\n        password: this.password\n      })\n }\n```\n\n但是在 **Vue3**中，我们刚刚说过`this`已经不是和 vue2 代表着这个组件了，所以我们需要不一样的自定义事件的方式。\n\n那怎么办呀？! ლಠ 益 ಠ)ლ\n\n不用慌，在`setup()`中的第二个参数`content`对象中就有`emit`，这个是和`this.$emit`是一样的。那么我们只要在`setup()`接收第二个参数中使用**分解对象法**取出`emit`就可以在 setup 方法中随意使用了。\n\n然后我们在`login`方法中编写登陆事件：\n\n```javascript\nsetup (props, { emit }) {\n    // ...\n\n    const login = () => {\n      emit('login', {\n        username: state.username,\n        password: state.password\n      })\n    }\n\n    // ...\n}\n```\n\n---\n\n# 最终的 vue2 对比 vue3 代码\n\n![最终的vue2对比vue3代码](https://img-blog.csdnimg.cn/20200308214440300.png)\n\n真的是太棒了，能看到这里的童鞋们，你们现在基本都看到 vue2 与 vue3 其实概念与理念都是一样的。只是有一些属性获取方式和声名和定义方式稍微变了。一直在鬼哭狼嚎的小小前端开发猿人们，你们可以松一口气了吧。\n\n总结一下，我觉得 **Vue3** 给我们前端开发者带来了全新的开发体验，更好的使用弹性，可控度也得到了大大的提升。如果你是一个学过或者接触过 **React** 然后现在想使用 Vue 的话，应该特别兴奋，因为很多使用方式都和 React 非常相近了 🎉！\n\n全新的`合成式API（Composition API）`可以提升代码的解耦程度 —— 特别是大型的前端应用，效果会更加明显。还有就是按需引用的有了更细微的可控性，让项目的性能和打包大小有更好的控制。\n\n最后我把完成的 **Vue2** 和 **Vue3** 的组件代码发出来给大家：\n\n**Vue2**\n\n```javascript\n<template>\n  <div class='form-element'>\n    <h2> {{ title }} </h2>\n    <input type='text' v-model='username' placeholder='Username' />\n\n    <input type='password' v-model='password' placeholder='Password' />\n\n    <button @click='login'>\n      Submit\n    </button>\n    <p>\n      Values: {{ username + ' ' + password }}\n    </p>\n  </div>\n</template>\n<script>\nexport default {\n  props: {\n    title: String\n  },\n  data () {\n    return {\n      username: '',\n      password: ''\n    }\n  },\n  mounted () {\n    console.log('title: ' + this.title)\n  },\n  computed: {\n    lowerCaseUsername () {\n      return this.username.toLowerCase()\n    }\n  },\n  methods: {\n    login () {\n      this.$emit('login', {\n        username: this.username,\n        password: this.password\n      })\n    }\n  }\n}\n</script>\n```\n\n**Vue3**\n\n```javascript\n<template>\n  <div class='form-element'>\n    <h2> {{ state.title }} </h2>\n    <input type='text' v-model='state.username' placeholder='Username' />\n\n    <input type='password' v-model='state.password' placeholder='Password' />\n\n    <button @click='login'>\n      Submit\n    </button>\n    <p>\n      Values: {{ state.username + ' ' + state.password }}\n    </p>\n  </div>\n</template>\n<script>\nimport { reactive, onMounted, computed } from 'vue'\n\nexport default {\n  props: {\n    title: String\n  },\n  setup (props, { emit }) {\n    const state = reactive({\n      username: '',\n      password: '',\n      lowerCaseUsername: computed(() => state.username.toLowerCase())\n    })\n\n    onMounted(() => {\n      console.log('title: ' + props.title)\n    })\n\n    const login = () => {\n      emit('login', {\n        username: state.username,\n        password: state.password\n      })\n    }\n\n    return {\n      login,\n      state\n    }\n  }\n}\n</script>\n```\n\n希望这篇文章能让大家体验到一个比较全面的 Vue2 与 Vue3 的开发区别。如果大家还有什么问题，可以在评论中提问哦！\n\n开发愉快！～\n\n![和你一起终身学习](https://img-blog.csdnimg.cn/20200321131747841.png)\n","photos":[],"count_time":{"symbolsCount":"8.5k","symbolsTime":"8 mins."},"categories":[{"name":"FrontEnd","slug":"FrontEnd","count":9,"path":"api/categories/FrontEnd.json"},{"name":"Vue","slug":"FrontEnd/Vue","count":1,"path":"api/categories/FrontEnd/Vue.json"}],"tags":[{"name":"Vue","slug":"Vue","count":1,"path":"api/tags/Vue.json"},{"name":"Vue3","slug":"Vue3","count":1,"path":"api/tags/Vue3.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA-template\"><span class=\"toc-text\">创建一个 template</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%BB%BA%E7%AB%8B%E6%95%B0%E6%8D%AE-data\"><span class=\"toc-text\">建立数据 data</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Vue2-%E5%AF%B9%E6%AF%94-Vue3-%E7%9A%84-methods-%E7%BC%96%E5%86%99\"><span class=\"toc-text\">Vue2 对比 Vue3 的 methods 编写</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E9%92%A9%E5%AD%90-%E2%80%94-Lifecyle-Hooks\"><span class=\"toc-text\">生命周期钩子 — Lifecyle Hooks</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7-Computed-Properties\"><span class=\"toc-text\">计算属性 - Computed Properties</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%8E%A5%E6%94%B6-Props\"><span class=\"toc-text\">接收 Props</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BA%8B%E4%BB%B6-Emitting-Events\"><span class=\"toc-text\">事件 - Emitting Events</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%9C%80%E7%BB%88%E7%9A%84-vue2-%E5%AF%B9%E6%AF%94-vue3-%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">最终的 vue2 对比 vue3 代码</span></a></li></ol>","author":{"name":"三钻","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":""},"mapped":true,"prev_post":{"title":"5大法则助你 成为更出色的开发者","uid":"4c45a5d6250916c34f3f63c144ebcf77","slug":"notes/5-principles-to-be-a-better-programmer","date":"2020-03-17T14:34:58.000Z","updated":"2021-03-30T13:45:00.065Z","comments":true,"path":"api/articles/notes/5-principles-to-be-a-better-programmer.json","keywords":null,"cover":"https://img-blog.csdnimg.cn/20200317002218652.png","text":"在现在这个技术高速发展的时代，无论你是在校学生，还是技术职场中的精英，都会面临需要持续提升。但是如果只知道提升技术能力，忽略了一些技巧和技术素养的培养和习惯。你会发现你再有能力，也变得无用武之地。因为真正的强者是不会只依赖 TA 的装备。更多的是技巧，经验，应变能力还有思想。 这...","link":"","photos":[],"count_time":{"symbolsCount":"6.7k","symbolsTime":"6 mins."},"categories":[{"name":"NOTES","slug":"NOTES","count":3,"path":"api/categories/NOTES.json"}],"tags":[{"name":"Programmer","slug":"Programmer","count":3,"path":"api/tags/Programmer.json"},{"name":"Better Programming","slug":"Better-Programming","count":3,"path":"api/tags/Better-Programming.json"}],"author":{"name":"三钻","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":""}},"next_post":{"title":"JavaScript中更简便的数组处理函数.map()，.reduce()，.filter()","uid":"413bd1d64b9fce9f3204cf3770091122","slug":"frontend/simplify-your-javascript-with","date":"2019-11-02T09:18:18.000Z","updated":"2021-03-30T13:45:00.061Z","comments":true,"path":"api/articles/frontend/simplify-your-javascript-with.json","keywords":null,"cover":"https://res.cloudinary.com/tridiamond/image/upload/v1572613799/blog/simplify-your-javascript-with_acr2px.jpg","text":"如果你刚接触 JavaScript 可能你还没有听说过.map()，.reduce()，.filter()。或者听说过，看过别人用过但是自己在实际项目中没有用过。在国内很多开发项目都是需要考虑 IE8 的兼容，为了兼容很多 JavaScript 好用的方法和技巧都被埋没了。但是我...","link":"","photos":[],"count_time":{"symbolsCount":"6.6k","symbolsTime":"6 mins."},"categories":[{"name":"FrontEnd","slug":"FrontEnd","count":9,"path":"api/categories/FrontEnd.json"},{"name":"Tips","slug":"FrontEnd/Tips","count":2,"path":"api/categories/FrontEnd/Tips.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":3,"path":"api/tags/JavaScript.json"},{"name":"ES6","slug":"ES6","count":1,"path":"api/tags/ES6.json"}],"author":{"name":"三钻","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":""}}}