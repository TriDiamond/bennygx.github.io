{"title":"JavaScript中更简便的数组处理函数.map()，.reduce()，.filter()","uid":"413bd1d64b9fce9f3204cf3770091122","slug":"frontend/simplify-your-javascript-with","date":"2019-11-02T09:18:18.000Z","updated":"2021-03-29T16:15:37.864Z","comments":true,"path":"api/articles/frontend/simplify-your-javascript-with.json","excerpt":"","keywords":null,"cover":"https://res.cloudinary.com/tridiamond/image/upload/v1572613799/blog/simplify-your-javascript-with_acr2px.jpg","content":"<p>如果你刚接触 JavaScript 可能你还没有听说过<code>.map()</code>，<code>.reduce()</code>，<code>.filter()</code>。或者听说过，看过别人用过但是自己在实际项目中没有用过。在国内很多开发项目都是需要考虑 IE8 的兼容，为了兼容很多 JavaScript 好用的方法和技巧都被埋没了。但是我发现近几年开始，很多开发项目已经完全抛弃了 IE 这个魔鬼了。如果你不需要兼容古老的 IE 浏览器了，那就要开始熟悉一下这几个方法来处理数组。</p>\n<blockquote>\n<p>注意这遍文章说的的 3 个方法其实在很多其他语言都可以使用到，因为这几个方法和使用概念在很多其他语言都是存在的。</p>\n</blockquote>\n<hr>\n<h1 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\".map()\"></a>.map()</h1><p>让我用一个简单的例子告诉你如何使用这个方法。假如你现在有多对象的数组数据 - 每一个对象代表着一个员工的信息。现在你想要的最终结果就是取出所有员工的唯一 ID 值。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 员工数据</span>\n<span class=\"token keyword\">var</span> employees <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">&#123;</span> id<span class=\"token operator\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Captain Piett'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#123;</span> id<span class=\"token operator\">:</span> <span class=\"token number\">24</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'General Veers'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#123;</span> id<span class=\"token operator\">:</span> <span class=\"token number\">56</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Admiral Ozzel'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#123;</span> id<span class=\"token operator\">:</span> <span class=\"token number\">88</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Commander Jerjerrod'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span>\n<span class=\"token comment\">// 你想要的结果</span>\n<span class=\"token punctuation\">;</span><span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">24</span><span class=\"token punctuation\">,</span> <span class=\"token number\">56</span><span class=\"token punctuation\">,</span> <span class=\"token number\">88</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>其实要实现这个结果有很多数组处理方式。传统的处理方法就是先定义一个空数组，然后使用<code>.forEach()</code>，<code>.for(...of)</code>，或者是最简单的<code>.for()</code>来组装 ID 到你定义的数组里面。</p>\n<p>我们来对比一下传统的处理方式和<code>.map()</code>的区别。</p>\n<p>使用<code>.forEach()</code>：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> employeeIds <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\nemployees<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">employee</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  employeeIds<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>officer<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>注意使用传统的方式，我们必须有一个预定义的空数组变量才行。但是如果是<code>.map()</code>就会更简单了。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> employeeIds <span class=\"token operator\">=</span> employees<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">employee</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> employee<span class=\"token punctuation\">.</span>id\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>甚至我们可以用更简洁的方式，使用箭头方法（但是需要 ES6 支持，Babel，或者 TypeScript）。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> employeeIds <span class=\"token operator\">=</span> employees<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">employee</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> employee<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>所以<code>.map()</code>到底是怎么运作的呢？这个方法有两个参数，第一是回调方法，第二是可选内容（会在回调方法中做为<code>this</code>）。数组里的<code>每个数值/对象会被循环进入到回调方法</code>里面，然后<code>返回新的数值/对象</code>到结果数组里面。</p>\n<p>注意的是结果数组的长度永远都会和被循环的数组的长度一致。</p>\n<hr>\n<h1 id=\"reduce\"><a href=\"#reduce\" class=\"headerlink\" title=\".reduce()\"></a>.reduce()</h1><p>与<code>.map()</code>相识，<code>.reduce()</code>也是循环一个回调方法，数组里面的每一个元素对回进入回调方法。区别是回调方法返回的值会被传递到下一个回调方法，如此类推（等同于一个累加器）。</p>\n<p><code>.reduce()</code>里的累加值可以是任何属性的值，包括<code>integer</code>，<code>string</code>，<code>object</code>等等。这个累加值会被实力化或者传递到下一个回调方法。</p>\n<p>来上代码，做个简单的例子！假如你有一个飞机师的数组，数组里面有每个飞机师的工龄。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> pilots <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">&#123;</span>\n    id<span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">'Poe Dameron'</span><span class=\"token punctuation\">,</span>\n    years<span class=\"token operator\">:</span> <span class=\"token number\">14</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#123;</span>\n    id<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">\"Temmin 'Snap' Wexley\"</span><span class=\"token punctuation\">,</span>\n    years<span class=\"token operator\">:</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#123;</span>\n    id<span class=\"token operator\">:</span> <span class=\"token number\">41</span><span class=\"token punctuation\">,</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">'Tallissan Lintra'</span><span class=\"token punctuation\">,</span>\n    years<span class=\"token operator\">:</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#123;</span>\n    id<span class=\"token operator\">:</span> <span class=\"token number\">99</span><span class=\"token punctuation\">,</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">'Ello Asty'</span><span class=\"token punctuation\">,</span>\n    years<span class=\"token operator\">:</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>现在我们需要知道所有飞机师累计的总工龄。使用<code>.reduce()</code>就是比吃饭还简单的事情。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> totalYears <span class=\"token operator\">=</span> pilots<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">accumulator<span class=\"token punctuation\">,</span> pilot</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> accumulator <span class=\"token operator\">+</span> pilot<span class=\"token punctuation\">.</span>years\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>注意我这里第二个参数我传了 0。第二个参数是一个累加值的初始值。当然如果场景需要这个初始值也可以传入一个变量或者你需要的值。循环了数组里的每一个元素后，reduce 方法会返回最终累加后的值（在我们这个例子中就是<code>82</code>）。</p>\n<blockquote>\n<p>例子里面的<code>acc</code>和<code>accumulator</code>就是累加值变量</p>\n</blockquote>\n<p>如果是使用 ES6 箭头写法，我们可以写的更加优雅简洁。一行就可以搞掂的事情！</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> totalYears <span class=\"token operator\">=</span> pilots<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">acc<span class=\"token punctuation\">,</span> pilot</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> acc <span class=\"token operator\">+</span> pilot<span class=\"token punctuation\">.</span>years<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>现在如果我们需要找到哪一位是最有经验的飞机师。这种情况我们一样可以使用<code>.reduce()</code>。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> mostExpPilot <span class=\"token operator\">=</span> pilots<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">oldest<span class=\"token punctuation\">,</span> pilot</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>oldest<span class=\"token punctuation\">.</span>years <span class=\"token operator\">||</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> pilot<span class=\"token punctuation\">.</span>years <span class=\"token operator\">?</span> oldest <span class=\"token operator\">:</span> pilot\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>这里我把<code>accumulator</code>变量改为<code>oldest</code>代表飞机师里面的老司机。这时候 reduce 里面的回调方法对比每一个飞机师，每一次飞机师的值进入这个回调方法，工龄更高的就会覆盖<code>oldest</code>变量。最终循环后得到的<code>oldest</code>就是工龄最高的飞机师。</p>\n<p>通过这几个例子，你可以看到使用<code>.reduce()</code>可以简单又优雅的在一个数组里面获取到单个最终值或者对象。</p>\n<hr>\n<h1 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\".filter()\"></a>.filter()</h1><p>如果你现在的场景是需要在一个数组里面过滤一部分的数据，这个时候<code>.filter()</code>就是你的最好的朋友了。</p>\n<p>我们用回飞机师的数据，并且加入了所属航空公司的值：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> pilots <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">&#123;</span>\n    id<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">'Wedge Antilles'</span><span class=\"token punctuation\">,</span>\n    faction<span class=\"token operator\">:</span> <span class=\"token string\">'Rebels'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#123;</span>\n    id<span class=\"token operator\">:</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">'Ciena Ree'</span><span class=\"token punctuation\">,</span>\n    faction<span class=\"token operator\">:</span> <span class=\"token string\">'Empire'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#123;</span>\n    id<span class=\"token operator\">:</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">'Iden Versio'</span><span class=\"token punctuation\">,</span>\n    faction<span class=\"token operator\">:</span> <span class=\"token string\">'Empire'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#123;</span>\n    id<span class=\"token operator\">:</span> <span class=\"token number\">66</span><span class=\"token punctuation\">,</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">'Thane Kyrell'</span><span class=\"token punctuation\">,</span>\n    faction<span class=\"token operator\">:</span> <span class=\"token string\">'Rebels'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>加入现在我们想分别筛选出<code>Rebels</code>和<code>Empire</code>两个航空公司的飞机师，使用<code>.filter()</code>就是轻而易举的事情！</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> rebels <span class=\"token operator\">=</span> pilots<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">pilot</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> pilot<span class=\"token punctuation\">.</span>faction <span class=\"token operator\">===</span> <span class=\"token string\">'Rebels'</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> empire <span class=\"token operator\">=</span> pilots<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">pilot</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> pilot<span class=\"token punctuation\">.</span>faction <span class=\"token operator\">===</span> <span class=\"token string\">'Empire'</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>就这么简单，如果使用箭头方法（ES6）就更加优雅了：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> rebels <span class=\"token operator\">=</span> pilots<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">pilot</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> pilot<span class=\"token punctuation\">.</span>faction <span class=\"token operator\">===</span> <span class=\"token string\">'Rebels'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> empire <span class=\"token operator\">=</span> pilots<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">pilot</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> pilot<span class=\"token punctuation\">.</span>faction <span class=\"token operator\">===</span> <span class=\"token string\">'Empire'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>其实原理很简单，只要你的回调方法返回的是<code>true</code>，这个值或者对象就会在新的数组里面了。如果返回的是<code>false</code>就会被过滤掉了。</p>\n<hr>\n<h1 id=\"结合使用-map-，-reduce-，-filter\"><a href=\"#结合使用-map-，-reduce-，-filter\" class=\"headerlink\" title=\"结合使用 .map()，.reduce()，.filter()\"></a>结合使用 .map()，.reduce()，.filter()</h1><p>既然我们刚刚学到的三个函数都是可以用于数组的，并且<code>.map()</code>和<code>.filter()</code>都是返回数组的。那我们就可以串联起来使用。不说多了上代码试试！</p>\n<p>我们用一个有趣一点的数据试验一下，假如现在我们有一个<code>星球大战</code>里面的<code>人物</code>的数组。每个字段的定义如下：</p>\n<blockquote>\n<ul>\n<li><code>Id</code>: 人物唯一 ID</li>\n<li><code>name</code>: 人物名字</li>\n<li><code>pilotingScore</code>: 飞行能力指数</li>\n<li><code>shootingScore</code>: 射击能力指数</li>\n<li><code>isForceUser</code>: 是否拥有隔空操控能力</li>\n</ul>\n</blockquote>\n<p>我们的目标：获取<code>拥有隔空操控能力的飞行员的总飞行能力指数</code>。我们先分开一步一步实现这个目标！</p>\n<ul>\n<li>首先我们需要先获取到拥有隔空操控能力的飞行员。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> jediPersonnel <span class=\"token operator\">=</span> personnel<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">person</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> person<span class=\"token punctuation\">.</span>isForceUser\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 结果集: [&#123;...&#125;, &#123;...&#125;, &#123;...&#125;] (Luke, Ezra and Caleb)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>这段代码我们获得了 3 个飞行员对象，分别都是拥有隔空操控能力的飞行员。使用这个对象我们来获取每个飞行员的飞行能力指数值。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> jediScores <span class=\"token operator\">=</span> jediPersonnel<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">jedi</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> jedi<span class=\"token punctuation\">.</span>pilotingScore <span class=\"token operator\">+</span> jedi<span class=\"token punctuation\">.</span>shootingScore\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 结果: [154, 110, 156]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>获取到每个飞行员的飞行能力指数值后，我们就可以用累加器（<code>.reduce()</code>）获取总飞行能力指数了。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> totalJediScore <span class=\"token operator\">=</span> jediScores<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">acc<span class=\"token punctuation\">,</span> score</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> acc <span class=\"token operator\">+</span> score\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 结果: 420</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这里分开实现方式可以达到我们的目标，但是其实我们可以串联起来，可以写的更加简洁又优雅！我们来玩玩更好玩的吧！</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> totalJediScore <span class=\"token operator\">=</span> personnel\n  <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">person</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> person<span class=\"token punctuation\">.</span>isForceUser\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">jedi</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> jedi<span class=\"token punctuation\">.</span>pilotingScore <span class=\"token operator\">+</span> jedi<span class=\"token punctuation\">.</span>shootingScore\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">acc<span class=\"token punctuation\">,</span> score</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> acc <span class=\"token operator\">+</span> score\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这样写是不是很优雅！都被这段代码给美到了！❤️</p>\n<p>如果我们使用箭头写法 ES6，就更加优雅了！</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> totalJediScore <span class=\"token operator\">=</span> personnel\n  <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">person</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> person<span class=\"token punctuation\">.</span>isForceUser<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">jedi</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> jedi<span class=\"token punctuation\">.</span>pilotingScore <span class=\"token operator\">+</span> jedi<span class=\"token punctuation\">.</span>shootingScore<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">acc<span class=\"token punctuation\">,</span> score</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> acc <span class=\"token operator\">+</span> score<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>哇！代码原来可以写的那么优雅的么？！想不到吧？</p>\n<blockquote>\n<p>其实我们只需要使用<code>.reduce()</code>就可以得到我们的目标结果了，以上例子做为教学例子，所以使用了 3 个我们学到的函数。</p>\n<p>我们来看看只用<code>.reduce()</code>怎么实现的，来我们一起来刷新一下三观吧！</p>\n</blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> totalJediScore <span class=\"token operator\">=</span> personnel<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">acc<span class=\"token punctuation\">,</span> person</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n    person<span class=\"token punctuation\">.</span>isForceUser\n      <span class=\"token operator\">?</span> acc <span class=\"token operator\">+</span> person<span class=\"token punctuation\">.</span>pilotingScore <span class=\"token operator\">+</span> person<span class=\"token punctuation\">.</span>shootingScore\n      <span class=\"token operator\">:</span> acc<span class=\"token punctuation\">,</span>\n  <span class=\"token number\">0</span>\n<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>不敢想象吧？一行就搞定一个功能不是梦！</p>\n<h1 id=\"为什么抛弃-forEach\"><a href=\"#为什么抛弃-forEach\" class=\"headerlink\" title=\"为什么抛弃 .forEach()?\"></a>为什么抛弃 .forEach()?</h1><p>其实我一开始写前端的时候也是一顿撸，来个数组都是撸个 for 循环，解决一切数组处理问题。但是近几年我开始步入前后端开发，API 接口对接。发现数据处理越来越多，如果还是像以前那样什么都用 for 循环来处理数据，那其实数据处理的代码就会越来越臃肿越来越复杂凌乱。所以我开始抛弃了<code>.forEach()</code>。开始做一个优雅的程序员！</p>\n<p>为什么使用<code>.map()</code>，<code>.filter()</code>，<code>.reduce()</code>写代码更优雅，更美观呢？我们用一个实战例子来对比一下吧。</p>\n<p>假设现在我们对接一个接口，返回的数组里面有两个字段<code>name：人的名称</code>和<code>title：对应的职位</code>。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">&#123;</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">'Jan Dodonna'</span><span class=\"token punctuation\">,</span>\n    title<span class=\"token operator\">:</span> <span class=\"token string\">'General'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#123;</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">'Gial Ackbar'</span><span class=\"token punctuation\">,</span>\n    title<span class=\"token operator\">:</span> <span class=\"token string\">'Admiral'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>产品经理给到你的需求是只需要展示这些人的职位称呼。</p>\n<blockquote>\n<p>当然这个时候有一些前端就会说“我只是个小小的前端，后端给我处理吧”。但是，这个接口其实是一个通用的接口，就是获取这些员工的资料的，是在多个地方使用的。如果每一个页面因为需要展示的不一样而要写多一个接口给你，你觉得这样好吗？做为一个优秀的前端工程师 🦁️，这种小 case 你自己就可以很优雅的处理好了。而且，在一个优秀的团队，后端确实是要考虑接口通用性的，这种为了你的方便而给他们带来更臃肿的接口是不可接受的。所以前端这个时候就是要重组数据了。</p>\n</blockquote>\n<p>假设现在产品给你的需求是员工列表展示，要支持只展示员工职称和员工左右信息的两种显示项。这个时候我们就要编写一个数据组装方法来跟进展示要求来改变数据格式。</p>\n<p>因为这个“神马“的需求，我们使用<code>.forEach()</code>来重组数据就相对比较麻烦了，而且代码也会变得臃肿。</p>\n<p>我们忽略了组装数据的方法，直接就当作我们已经写好了一个组装数据的方法为<code>formatElement</code>。如果我们用<code>forEach</code>首先我们就需要定义一个空数组来接收结果。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> results <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\ndata<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">element</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> formatted <span class=\"token operator\">=</span> <span class=\"token function\">formatElement</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span>\n  results<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>formatted<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>所以我们需要两个方法才能实现这个数据结果，但是为什么要写的那么臃肿呢？因为<code>forEach</code>并没有返回值，单单就给你跑个循环，还需要自己<code>push</code>值到预定义的变量里面。其实一个方法就可以完成了，而且重点是一行代码就完事了。</p>\n<p>来使用我们新学的技巧，用<code>.map()</code>来实现就非常简单优雅了。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> results <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>formatElement<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>你学会了吗？学会了就去尝试用<code>.map()</code>，<code>.reduce()</code>，<code>.filter()</code>来替换你传统的<code>for</code>循环吧！我保证你的代码会越来越简洁，可读性更高。</p>\n<p>如果你喜欢我的这遍文章，记得继续关注我的博客，下一遍文章我们开学习怎么在 JavaScript 中使用<code>.some()</code>和<code>.find()</code>。</p>\n<p>坚持做一个优雅的程序员，坚持每天敲代码！</p>\n","feature":null,"text":"如果你刚接触 JavaScript 可能你还没有听说过.map()，.reduce()，.filter()。或者听说过，看过别人用过但是自己在实际项目中没有用过。在国内很多开发项目都是需要考虑 IE8 的兼容，为了兼容很多 JavaScript 好用的方法和技巧都被埋没了。但是我...","link":"","raw":"---\ntitle: JavaScript中更简便的数组处理函数.map()，.reduce()，.filter()\ndate: 2019-11-02 09:18:18\ntags:\n  - JavaScript\n  - ES6\ncategories:\n  - FrontEnd\n  - Tips\ncover: https://res.cloudinary.com/tridiamond/image/upload/v1572613799/blog/simplify-your-javascript-with_acr2px.jpg\n---\n\n如果你刚接触 JavaScript 可能你还没有听说过`.map()`，`.reduce()`，`.filter()`。或者听说过，看过别人用过但是自己在实际项目中没有用过。在国内很多开发项目都是需要考虑 IE8 的兼容，为了兼容很多 JavaScript 好用的方法和技巧都被埋没了。但是我发现近几年开始，很多开发项目已经完全抛弃了 IE 这个魔鬼了。如果你不需要兼容古老的 IE 浏览器了，那就要开始熟悉一下这几个方法来处理数组。\n\n> 注意这遍文章说的的 3 个方法其实在很多其他语言都可以使用到，因为这几个方法和使用概念在很多其他语言都是存在的。\n\n---\n\n# .map()\n\n让我用一个简单的例子告诉你如何使用这个方法。假如你现在有多对象的数组数据 - 每一个对象代表着一个员工的信息。现在你想要的最终结果就是取出所有员工的唯一 ID 值。\n\n```javascript\n// 员工数据\nvar employees = [\n  { id: 20, name: 'Captain Piett' },\n  { id: 24, name: 'General Veers' },\n  { id: 56, name: 'Admiral Ozzel' },\n  { id: 88, name: 'Commander Jerjerrod' },\n]\n// 你想要的结果\n;[20, 24, 56, 88]\n```\n\n其实要实现这个结果有很多数组处理方式。传统的处理方法就是先定义一个空数组，然后使用`.forEach()`，`.for(...of)`，或者是最简单的`.for()`来组装 ID 到你定义的数组里面。\n\n我们来对比一下传统的处理方式和`.map()`的区别。\n\n使用`.forEach()`：\n\n```javascript\nvar employeeIds = []\nemployees.forEach(function (employee) {\n  employeeIds.push(officer.id)\n})\n```\n\n注意使用传统的方式，我们必须有一个预定义的空数组变量才行。但是如果是`.map()`就会更简单了。\n\n```javascript\nvar employeeIds = employees.map(function (employee) {\n  return employee.id\n})\n```\n\n甚至我们可以用更简洁的方式，使用箭头方法（但是需要 ES6 支持，Babel，或者 TypeScript）。\n\n```javascript\nconst employeeIds = employees.map((employee) => employee.id)\n```\n\n所以`.map()`到底是怎么运作的呢？这个方法有两个参数，第一是回调方法，第二是可选内容（会在回调方法中做为`this`）。数组里的`每个数值/对象会被循环进入到回调方法`里面，然后`返回新的数值/对象`到结果数组里面。\n\n注意的是结果数组的长度永远都会和被循环的数组的长度一致。\n\n---\n\n# .reduce()\n\n与`.map()`相识，`.reduce()`也是循环一个回调方法，数组里面的每一个元素对回进入回调方法。区别是回调方法返回的值会被传递到下一个回调方法，如此类推（等同于一个累加器）。\n\n`.reduce()`里的累加值可以是任何属性的值，包括`integer`，`string`，`object`等等。这个累加值会被实力化或者传递到下一个回调方法。\n\n来上代码，做个简单的例子！假如你有一个飞机师的数组，数组里面有每个飞机师的工龄。\n\n```javascript\nvar pilots = [\n  {\n    id: 10,\n    name: 'Poe Dameron',\n    years: 14,\n  },\n  {\n    id: 2,\n    name: \"Temmin 'Snap' Wexley\",\n    years: 30,\n  },\n  {\n    id: 41,\n    name: 'Tallissan Lintra',\n    years: 16,\n  },\n  {\n    id: 99,\n    name: 'Ello Asty',\n    years: 22,\n  },\n]\n```\n\n现在我们需要知道所有飞机师累计的总工龄。使用`.reduce()`就是比吃饭还简单的事情。\n\n```javascript\nvar totalYears = pilots.reduce(function (accumulator, pilot) {\n  return accumulator + pilot.years\n}, 0)\n```\n\n注意我这里第二个参数我传了 0。第二个参数是一个累加值的初始值。当然如果场景需要这个初始值也可以传入一个变量或者你需要的值。循环了数组里的每一个元素后，reduce 方法会返回最终累加后的值（在我们这个例子中就是`82`）。\n\n> 例子里面的`acc`和`accumulator`就是累加值变量\n\n如果是使用 ES6 箭头写法，我们可以写的更加优雅简洁。一行就可以搞掂的事情！\n\n```javascript\nconst totalYears = pilots.reduce((acc, pilot) => acc + pilot.years, 0)\n```\n\n现在如果我们需要找到哪一位是最有经验的飞机师。这种情况我们一样可以使用`.reduce()`。\n\n```javascript\nvar mostExpPilot = pilots.reduce(function (oldest, pilot) {\n  return (oldest.years || 0) > pilot.years ? oldest : pilot\n}, {})\n```\n\n这里我把`accumulator`变量改为`oldest`代表飞机师里面的老司机。这时候 reduce 里面的回调方法对比每一个飞机师，每一次飞机师的值进入这个回调方法，工龄更高的就会覆盖`oldest`变量。最终循环后得到的`oldest`就是工龄最高的飞机师。\n\n通过这几个例子，你可以看到使用`.reduce()`可以简单又优雅的在一个数组里面获取到单个最终值或者对象。\n\n---\n\n# .filter()\n\n如果你现在的场景是需要在一个数组里面过滤一部分的数据，这个时候`.filter()`就是你的最好的朋友了。\n\n我们用回飞机师的数据，并且加入了所属航空公司的值：\n\n```javascript\nvar pilots = [\n  {\n    id: 2,\n    name: 'Wedge Antilles',\n    faction: 'Rebels',\n  },\n  {\n    id: 8,\n    name: 'Ciena Ree',\n    faction: 'Empire',\n  },\n  {\n    id: 40,\n    name: 'Iden Versio',\n    faction: 'Empire',\n  },\n  {\n    id: 66,\n    name: 'Thane Kyrell',\n    faction: 'Rebels',\n  },\n]\n```\n\n加入现在我们想分别筛选出`Rebels`和`Empire`两个航空公司的飞机师，使用`.filter()`就是轻而易举的事情！\n\n```javascript\nvar rebels = pilots.filter(function (pilot) {\n  return pilot.faction === 'Rebels'\n})\nvar empire = pilots.filter(function (pilot) {\n  return pilot.faction === 'Empire'\n})\n```\n\n就这么简单，如果使用箭头方法（ES6）就更加优雅了：\n\n```javascript\nconst rebels = pilots.filter((pilot) => pilot.faction === 'Rebels')\nconst empire = pilots.filter((pilot) => pilot.faction === 'Empire')\n```\n\n其实原理很简单，只要你的回调方法返回的是`true`，这个值或者对象就会在新的数组里面了。如果返回的是`false`就会被过滤掉了。\n\n---\n\n# 结合使用 .map()，.reduce()，.filter()\n\n既然我们刚刚学到的三个函数都是可以用于数组的，并且`.map()`和`.filter()`都是返回数组的。那我们就可以串联起来使用。不说多了上代码试试！\n\n我们用一个有趣一点的数据试验一下，假如现在我们有一个`星球大战`里面的`人物`的数组。每个字段的定义如下：\n\n> - `Id`: 人物唯一 ID\n> - `name`: 人物名字\n> - `pilotingScore`: 飞行能力指数\n> - `shootingScore`: 射击能力指数\n> - `isForceUser`: 是否拥有隔空操控能力\n\n我们的目标：获取`拥有隔空操控能力的飞行员的总飞行能力指数`。我们先分开一步一步实现这个目标！\n\n- 首先我们需要先获取到拥有隔空操控能力的飞行员。\n\n```javascript\nvar jediPersonnel = personnel.filter(function (person) {\n  return person.isForceUser\n})\n// 结果集: [{...}, {...}, {...}] (Luke, Ezra and Caleb)\n```\n\n- 这段代码我们获得了 3 个飞行员对象，分别都是拥有隔空操控能力的飞行员。使用这个对象我们来获取每个飞行员的飞行能力指数值。\n\n```javascript\nvar jediScores = jediPersonnel.map(function (jedi) {\n  return jedi.pilotingScore + jedi.shootingScore\n})\n// 结果: [154, 110, 156]\n```\n\n- 获取到每个飞行员的飞行能力指数值后，我们就可以用累加器（`.reduce()`）获取总飞行能力指数了。\n\n```javascript\nvar totalJediScore = jediScores.reduce(function (acc, score) {\n  return acc + score\n}, 0)\n// 结果: 420\n```\n\n这里分开实现方式可以达到我们的目标，但是其实我们可以串联起来，可以写的更加简洁又优雅！我们来玩玩更好玩的吧！\n\n```javascript\nvar totalJediScore = personnel\n  .filter(function (person) {\n    return person.isForceUser\n  })\n  .map(function (jedi) {\n    return jedi.pilotingScore + jedi.shootingScore\n  })\n  .reduce(function (acc, score) {\n    return acc + score\n  }, 0)\n```\n\n这样写是不是很优雅！都被这段代码给美到了！❤️\n\n如果我们使用箭头写法 ES6，就更加优雅了！\n\n```javascript\nconst totalJediScore = personnel\n  .filter((person) => person.isForceUser)\n  .map((jedi) => jedi.pilotingScore + jedi.shootingScore)\n  .reduce((acc, score) => acc + score, 0)\n```\n\n哇！代码原来可以写的那么优雅的么？！想不到吧？\n\n> 其实我们只需要使用`.reduce()`就可以得到我们的目标结果了，以上例子做为教学例子，所以使用了 3 个我们学到的函数。\n>\n> 我们来看看只用`.reduce()`怎么实现的，来我们一起来刷新一下三观吧！\n\n```javascript\nconst totalJediScore = personnel.reduce(\n  (acc, person) =>\n    person.isForceUser\n      ? acc + person.pilotingScore + person.shootingScore\n      : acc,\n  0\n)\n```\n\n不敢想象吧？一行就搞定一个功能不是梦！\n\n# 为什么抛弃 .forEach()?\n\n其实我一开始写前端的时候也是一顿撸，来个数组都是撸个 for 循环，解决一切数组处理问题。但是近几年我开始步入前后端开发，API 接口对接。发现数据处理越来越多，如果还是像以前那样什么都用 for 循环来处理数据，那其实数据处理的代码就会越来越臃肿越来越复杂凌乱。所以我开始抛弃了`.forEach()`。开始做一个优雅的程序员！\n\n为什么使用`.map()`，`.filter()`，`.reduce()`写代码更优雅，更美观呢？我们用一个实战例子来对比一下吧。\n\n假设现在我们对接一个接口，返回的数组里面有两个字段`name：人的名称`和`title：对应的职位`。\n\n```javascript\nvar data = [\n  {\n    name: 'Jan Dodonna',\n    title: 'General',\n  },\n  {\n    name: 'Gial Ackbar',\n    title: 'Admiral',\n  },\n]\n```\n\n产品经理给到你的需求是只需要展示这些人的职位称呼。\n\n> 当然这个时候有一些前端就会说“我只是个小小的前端，后端给我处理吧”。但是，这个接口其实是一个通用的接口，就是获取这些员工的资料的，是在多个地方使用的。如果每一个页面因为需要展示的不一样而要写多一个接口给你，你觉得这样好吗？做为一个优秀的前端工程师 🦁️，这种小 case 你自己就可以很优雅的处理好了。而且，在一个优秀的团队，后端确实是要考虑接口通用性的，这种为了你的方便而给他们带来更臃肿的接口是不可接受的。所以前端这个时候就是要重组数据了。\n\n假设现在产品给你的需求是员工列表展示，要支持只展示员工职称和员工左右信息的两种显示项。这个时候我们就要编写一个数据组装方法来跟进展示要求来改变数据格式。\n\n因为这个“神马“的需求，我们使用`.forEach()`来重组数据就相对比较麻烦了，而且代码也会变得臃肿。\n\n我们忽略了组装数据的方法，直接就当作我们已经写好了一个组装数据的方法为`formatElement`。如果我们用`forEach`首先我们就需要定义一个空数组来接收结果。\n\n```javascript\nvar results = []\ndata.forEach(function (element) {\n  var formatted = formatElement(element)\n  results.push(formatted)\n})\n```\n\n所以我们需要两个方法才能实现这个数据结果，但是为什么要写的那么臃肿呢？因为`forEach`并没有返回值，单单就给你跑个循环，还需要自己`push`值到预定义的变量里面。其实一个方法就可以完成了，而且重点是一行代码就完事了。\n\n来使用我们新学的技巧，用`.map()`来实现就非常简单优雅了。\n\n```javascript\nvar results = data.map(formatElement)\n```\n\n# 总结\n\n你学会了吗？学会了就去尝试用`.map()`，`.reduce()`，`.filter()`来替换你传统的`for`循环吧！我保证你的代码会越来越简洁，可读性更高。\n\n如果你喜欢我的这遍文章，记得继续关注我的博客，下一遍文章我们开学习怎么在 JavaScript 中使用`.some()`和`.find()`。\n\n坚持做一个优雅的程序员，坚持每天敲代码！\n","photos":[],"count_time":{"symbolsCount":"6.6k","symbolsTime":"6 mins."},"categories":[{"name":"FrontEnd","slug":"FrontEnd","count":9,"path":"api/categories/FrontEnd.json"},{"name":"Tips","slug":"FrontEnd/Tips","count":2,"path":"api/categories/FrontEnd/Tips.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":3,"path":"api/tags/JavaScript.json"},{"name":"ES6","slug":"ES6","count":1,"path":"api/tags/ES6.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#map\"><span class=\"toc-text\">.map()</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#reduce\"><span class=\"toc-text\">.reduce()</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#filter\"><span class=\"toc-text\">.filter()</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%BB%93%E5%90%88%E4%BD%BF%E7%94%A8-map-%EF%BC%8C-reduce-%EF%BC%8C-filter\"><span class=\"toc-text\">结合使用 .map()，.reduce()，.filter()</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E6%8A%9B%E5%BC%83-forEach\"><span class=\"toc-text\">为什么抛弃 .forEach()?</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol>","author":{"name":"三钻","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":""},"mapped":true,"prev_post":{"title":"带你体验Vue2和Vue3开发组件有什么区别","uid":"3d6151b8bdfcae4be7bfdc3647f80109","slug":"frontend/difference-between-vue-and-vue3","date":"2020-03-08T21:59:18.000Z","updated":"2021-03-29T16:15:37.864Z","comments":true,"path":"api/articles/frontend/difference-between-vue-and-vue3.json","keywords":null,"cover":"https://img-blog.csdnimg.cn/20200308232228307.png","text":"我们一直都有关注和阅读很多关于 Vue3 的新特性和功能即将到来。但是我们没有一个具体的概念在开发中会有如何的改变和不一样的体验。还有一些童鞋已经开始又慌又抓狂了 – “又要开始学新的写法了 (ノ ToT )ノ ~┻┻”。 所以这里我使用 Vue2 和 Vue3 开发一个简单的表...","link":"","photos":[],"count_time":{"symbolsCount":"8.5k","symbolsTime":"8 mins."},"categories":[{"name":"FrontEnd","slug":"FrontEnd","count":9,"path":"api/categories/FrontEnd.json"},{"name":"Vue","slug":"FrontEnd/Vue","count":1,"path":"api/categories/FrontEnd/Vue.json"}],"tags":[{"name":"Vue","slug":"Vue","count":1,"path":"api/tags/Vue.json"},{"name":"Vue3","slug":"Vue3","count":1,"path":"api/tags/Vue3.json"}],"author":{"name":"三钻","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":""}},"next_post":{"title":"如何高效学习编程","uid":"84a74e4a5473540e455e5775f4e38ad4","slug":"notes/learn-programming-more-effectively","date":"2019-11-01T10:26:02.000Z","updated":"2021-03-29T16:15:37.868Z","comments":true,"path":"api/articles/notes/learn-programming-more-effectively.json","keywords":null,"cover":"https://res.cloudinary.com/tridiamond/image/upload/v1571765343/blog/programming-learning-tips_orzxb3.jpg","text":"编程确实不是一件容易的事情，除了要有较强的逻辑思维，还需要花大量的时间和集中力来提升和维持一定的高度。 与其他的领域不一样的是，技术每日都在变，所以对于编程初学者是很难一直与时并进的。就算是技术大神和老司机们也是追赶的比较吃力的。在技术领域打滚的这些年里，通过经历和经验总结出一些...","link":"","photos":[],"count_time":{"symbolsCount":"5.9k","symbolsTime":"5 mins."},"categories":[{"name":"Notes","slug":"Notes","count":1,"path":"api/categories/Notes.json"}],"tags":[{"name":"Learning","slug":"Learning","count":1,"path":"api/tags/Learning.json"},{"name":"Programming","slug":"Programming","count":1,"path":"api/tags/Programming.json"},{"name":"Notes","slug":"Notes","count":1,"path":"api/tags/Notes.json"}],"author":{"name":"三钻","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":""}}}