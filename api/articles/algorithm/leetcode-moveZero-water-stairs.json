{"title":"力扣实战之移动零、盛最多的水、爬楼梯","uid":"1781b683e9507c36c168e35402e3a5a4","slug":"algorithm/leetcode-moveZero-water-stairs","date":"2020-06-24T22:03:17.000Z","updated":"2021-03-30T13:45:00.061Z","comments":true,"path":"api/articles/algorithm/leetcode-moveZero-water-stairs.json","excerpt":"","keywords":null,"cover":"https://img-blog.csdnimg.cn/20200716163259937.jpg","content":"<h1 id=\"练题法则\"><a href=\"#练题法则\" class=\"headerlink\" title=\"练题法则\"></a>练题法则</h1><p><strong>5-10 分钟读题与思考</strong></p>\n<ul>\n<li><strong>不要纠结</strong>没有思路就直接看题解；</li>\n<li><strong>不要死磕</strong>觉得自己很失败，怎么我们就想不出来；</li>\n<li>基本上这些算法题，让我们自己想出来是不可能的；</li>\n<li>拿跳表的来说，如果我们能从 0-1 把它想出来，那我们就可以拿到图灵奖了；</li>\n<li>所以记住！<strong>无思路就直接看题解，无思路就直接看题解，无思路就直接看题解</strong>！</li>\n<li>我们只需要<strong>知道并且能运用即可！</strong></li>\n</ul>\n<p><strong>有思路</strong></p>\n<ul>\n<li>自己开始写代码，没有，就马上看题解！<br><strong>默写背题，熟练</strong></li>\n<li>做完题目后，我们需要记住这种题的思路和有<strong>N 种解决办法</strong>；</li>\n<li>重复再<strong>重复的默写，</strong>直到自己有深刻的影响；</li>\n</ul>\n<p><strong>最后开始自己写（闭卷）</strong></p>\n<ul>\n<li>到了这里如果我们还需要看别人代码，那就要回去背题；</li>\n<li>能到达这个阶段基本这种题你已经开始熟悉的，接下来就是反复练习；</li>\n</ul>\n<h2 id=\"在哪里练题？\"><a href=\"#在哪里练题？\" class=\"headerlink\" title=\"在哪里练题？\"></a>在哪里练题？</h2><p>那肯定是<a href=\"https://leetcode-cn.com/\">力扣</a>了！没有账号的小伙伴，马上就去注册个账号开始日复一日的练习吧！～</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200613135642518.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70\"></p>\n<h1 id=\"283-题-移动零\"><a href=\"#283-题-移动零\" class=\"headerlink\" title=\"283 题 - 移动零\"></a>283 题 - 移动零</h1><blockquote>\n<p><a href=\"https://leetcode-cn.com/problems/move-zeroes/\">283. 移动零</a>｜<strong>难度</strong>：<font color=\"green\">简单</font></p>\n</blockquote>\n<h2 id=\"题目讲解\"><a href=\"#题目讲解\" class=\"headerlink\" title=\"题目讲解\"></a>题目讲解</h2><p>给定一个数组 <code>nums</code>，编写一个函数将所有 <code>0</code> 移动到数组的末尾，同时保持非零元素的相对顺序。</p>\n<p>示例：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: [0,1,0,3,12]\n输出: [1,3,12,0,0]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>说明</strong>:</p>\n<ol>\n<li>必须在原数组上操作，不能拷贝额外的数组。</li>\n<li>尽量减少操作次数。</li>\n</ol>\n<p><strong>这里需要注意的重点：</strong></p>\n<ol>\n<li>所有 <code>0</code> 移动到数组的末尾；</li>\n<li>保持非零元素的相对顺序；</li>\n<li>必须在原数组上操作，不能拷贝额外的数组；</li>\n</ol>\n<h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><blockquote>\n<p>思考题解时，使用<strong>MECE 原则</strong> — 每一个思路都相对独立的思维，然后想到完全穷尽。首先不要管附加条件，先把有可能解决这个问题的思路都想出来，再评估哪一个办法是最优解。面试的时候也是一样，说出你所有可以想到的思路，然后分别讲出各自的优点与缺点，最后提出最优答案。</p>\n</blockquote>\n<ol>\n<li><strong>统计 0 的个数</strong><ul>\n<li>循环数组找到 0 的位置，遇到 0 就为 0 的个数加一；</li>\n<li>遇到不是 0 的时候，把非 0 的元素值与 0 的元素交换即可；</li>\n</ul>\n</li>\n<li><strong>开新数组</strong><ul>\n<li>给一个指针<code>i</code>从数组的头部开始递增；</li>\n<li>给一个指针<code>j</code>从数组的尾部开始递减（也就是原数组的总长度）；</li>\n<li>遇到零就往<code>j</code>指针的位置放，然后<code>j--</code>；</li>\n<li>遇到非零就往<code>i</code>指针的位置放，然后<code>i++</code>；</li>\n<li><strong>缺点：</strong>内存使用会高；</li>\n<li><strong>不符合条件：</strong>必须在原数组上操作，所以可以实现但是不符合条件；</li>\n</ul>\n</li>\n<li><strong>双指针交换</strong><ul>\n<li>给两个指针<code>i</code>和<code>j</code>，并且默认都从 0 开始；</li>\n<li><code>i</code>指向的是当前位置；</li>\n<li><code>j</code>指针会一直移动，直到找到一个非零元素，然后与<code>i</code>位置的值交换；</li>\n<li>如果<code>j</code>的位置与<code>i</code>不是一致的话，就可以给<code>j</code>的值换成 0；</li>\n</ul>\n</li>\n<li><strong>双指针替换后清零</strong><ul>\n<li>这个与<strong>第三种</strong>方法一致，也是双指针；</li>\n<li>唯一的区别是不在<code>i</code>指针扫描的时候替换零；</li>\n<li>而是在替换完毕所有非零元素后，把剩余的全部位数都改为 0；</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"解题代码\"><a href=\"#解题代码\" class=\"headerlink\" title=\"解题代码\"></a>解题代码</h2><p><strong>「方法一」</strong> - 统计 0 的个数：</p>\n<ul>\n<li>时间复杂度：$O(n)$ - N 个元素就需要遍历 N 次</li>\n<li>空间复杂度：$O(1)$ - 只对原数组进行替换操作</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/**\n * @param &#123;number[]&#125; nums\n * @return &#123;void&#125; Do not return anything, modify nums in-place instead.\n */</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">moveZeroes</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">nums</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> zeroCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      zeroCount <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>zeroCount <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      nums<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> zeroCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n      nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>「方法二」</strong> - 双指针交换：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200624213737392.gif#pic_center\"></p>\n<ul>\n<li>时间复杂度：$O(n)$ - N 个元素就需要遍历 N 次</li>\n<li>空间复杂度：$O(1)$ - 只对原数组进行替换操作</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/**\n * @param &#123;number[]&#125; nums\n * @return &#123;void&#125; Do not return anything, modify nums in-place instead.\n */</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">moveZeroes</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">nums</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">!==</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n      <span class=\"token punctuation\">&#125;</span>\n      j<span class=\"token operator\">++</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>「方法三」</strong> - 双指针替换后清零：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200624213755998.gif#pic_center\"></p>\n<ul>\n<li>时间复杂度：$O(n)$ - N 个元素就需要遍历 N 次，加上最后清零是走了<code>n减非零的个数</code>，那就是<code>O(n+n-i)</code>，总的来说还是<code>O(n)</code></li>\n<li>空间复杂度：$O(1)$ - 只对原数组进行替换操作</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/**\n * @param &#123;number[]&#125; nums\n * @return &#123;void&#125; Do not return anything, modify nums in-place instead.\n */</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">moveZeroes</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">nums</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n      j<span class=\"token operator\">++</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> k <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    nums<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"边界测试用例\"><a href=\"#边界测试用例\" class=\"headerlink\" title=\"边界测试用例\"></a>边界测试用例</h2><blockquote>\n<p>[0,1,0,3,12][1,2] &gt; [0,0]</p>\n</blockquote>\n<h2 id=\"题解对比与分析\"><a href=\"#题解对比与分析\" class=\"headerlink\" title=\"题解对比与分析\"></a>题解对比与分析</h2><blockquote>\n<p><strong>注意</strong>：以下数据都是在<strong>力扣</strong>中提交后返回的结果，每次提交都有可能不一致。所以相近的方案输出的结果有所差异也是正常的，最终<strong>最优方案要通过分析代码来确定</strong>，<strong>不能只以力扣输出的数据为准，只能供于我们作为参考</strong>。</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>执行时间</th>\n<th>内存消耗</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>「方法一」- 统计 0 的个数</td>\n<td>96 ms（战胜 17.82%）</td>\n<td>37.1 MB</td>\n</tr>\n<tr>\n<td>「方法二」- 双指针交换</td>\n<td>72 ms（战胜 87.23%）</td>\n<td>37.2 MB</td>\n</tr>\n<tr>\n<td>「方法三」- 双指针替换后清零</td>\n<td>76 ms（战胜 73.98%）</td>\n<td>37.2 MB</td>\n</tr>\n</tbody></table>\n<p><strong>分析一下：</strong></p>\n<ul>\n<li>第一种方法是通过统计 0 出现的次数来定位到需要替换 0 的所在位置，里面涉及一个<code>i - zeroCount</code>的运算，所以相对其他方法来说运行时间会更长一些；</li>\n<li>第二个方法是通过两个指针一起运行，一个固定在 0 元素，一个一直走找到非 0 元素，最后做一个交换，这种方法没有涉及运算，同时也是一个循环就可以完成，相对来说是最优解；</li>\n<li>第三种方法也是用了双指针，与第二种方法的唯一区别就是先替换掉所有 0 的元素，最后把剩余的元素全部一次性替换成 0。可读性来说，个人觉得更容易懂，但是时间和空间复杂度和第二种方法是一致的。</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/20200613135642518.png\"></p>\n<h1 id=\"11-题-盛最多水的容器\"><a href=\"#11-题-盛最多水的容器\" class=\"headerlink\" title=\"11 题 - 盛最多水的容器\"></a>11 题 - 盛最多水的容器</h1><blockquote>\n<p><a href=\"https://leetcode-cn.com/problems/container-with-most-water/\">283. 盛最多水的容器</a>｜<strong>难度</strong>：<font color=\"orange\">中等</font></p>\n</blockquote>\n<h2 id=\"题目讲解-1\"><a href=\"#题目讲解-1\" class=\"headerlink\" title=\"题目讲解\"></a>题目讲解</h2><p>给你 n 个非负整数 a1，a2，…，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0)。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。</p>\n<blockquote>\n<p>说明：你不能倾斜容器，且 n 的值至少为 2。</p>\n</blockquote>\n<p><img src=\"https://img-blog.csdnimg.cn/20200624214839464.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70#pic_center\"></p>\n<p>图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。</p>\n<p><strong>示例：</strong></p>\n<blockquote>\n<p>输入：[1,8,6,2,5,4,8,3,7]<br>输出：49</p>\n</blockquote>\n<p><strong>题目重点：</strong></p>\n<ol>\n<li>首先我们的目标是挑选两条柱子，从而让两个柱子之前可以得出最大的面积（面积越大自然可容纳的水就越多）；</li>\n<li>挑选最长的两个柱子不等于拥有最大的面积，因为它们之间的距离也是决定空间的一个维度；</li>\n<li>所以重点是找到高度和宽度比例最大的一对柱子，从而得出最大面积；</li>\n<li>注意在运算面积时，我们只能用一对柱子中最短的一条作为高度，因为水只能填满到最短的那条柱子的高度；</li>\n<li>面积运算公式： <code>高度 x 宽度 = 面积</code></li>\n</ol>\n<h2 id=\"解题思路-1\"><a href=\"#解题思路-1\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ol>\n<li><p><strong>枚举</strong> —— 暴力解法</p>\n<ul>\n<li>遍历左边和右边，找出所有面积；</li>\n<li>列出所有柱子的组合；</li>\n<li>算出所有组合各自的面积；</li>\n<li>最后输出最大的面积的一组；</li>\n<li><strong>缺点：</strong>遍历次数过高，所以时间复杂度会相对偏高</li>\n<li><strong>复杂度</strong>：时间复杂度 $O(n^2)$、空间复杂度 $O(1)$</li>\n</ul>\n</li>\n<li><p><strong>双指针</strong></p>\n<ul>\n<li><p>左右两边都往中间移动；</p>\n</li>\n<li><p>需要移动左右两头的问题都可以考虑双指针；</p>\n</li>\n<li><p>相同情况下两遍距离越远越好；</p>\n</li>\n<li><p>区域受限于较短边的高度；</p>\n</li>\n<li><p>所以让较矮的那边的指针往内移动；</p>\n</li>\n<li><p>一直以上面的规则移动知道两个指针重合；</p>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"解题代码-1\"><a href=\"#解题代码-1\" class=\"headerlink\" title=\"解题代码\"></a>解题代码</h2><p><strong>「方法一」</strong> - 枚举（暴力破解）：</p>\n<ul>\n<li>时间复杂度：$O(n^2)$ - 双循环，所以总计循环了 N^2。</li>\n<li>空间复杂度：$O(1)$</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/**\n * @param &#123;number[]&#125; height\n * @return &#123;number&#125;\n */</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">maxArea</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">height</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> max <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> height<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> height<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">let</span> area <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">-</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>height<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n      max <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">,</span> area<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> max\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>「方法二」</strong> - 双指针：</p>\n<ul>\n<li>时间复杂度：$O(n)$ - 双指针总计最多遍历整个数组一次。</li>\n<li>空间复杂度：$O(1)$ - 只需要额外的常数级别的空间。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/**\n * @param &#123;number[]&#125; height\n * @return &#123;number&#125;\n */</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">maxArea</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">height</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> max <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> height<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> j<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> minHeight <span class=\"token operator\">=</span> height<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> height<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> height<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> height<span class=\"token punctuation\">[</span>j<span class=\"token operator\">--</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">let</span> area <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">-</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> minHeight\n    max <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">,</span> area<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token keyword\">return</span> max\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"题解对比与分析-1\"><a href=\"#题解对比与分析-1\" class=\"headerlink\" title=\"题解对比与分析\"></a>题解对比与分析</h2><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>执行时间（毫秒）</th>\n<th>内存消耗</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>枚举（暴力破解）</td>\n<td>984 ms （战胜 9.99%）</td>\n<td>35.9 MB</td>\n</tr>\n<tr>\n<td>双指针</td>\n<td>56 ms（战胜 99.88%）</td>\n<td>36 MB</td>\n</tr>\n</tbody></table>\n<p><strong>分析一下</strong></p>\n<ul>\n<li>通过使用第二种方法，我们从$O(n^2)$的时间复杂度降到$O(n)$，总的执行时间大概是<strong>快了 17 倍</strong>。</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/20200613135642518.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70\"></p>\n<h1 id=\"70-题-爬楼梯\"><a href=\"#70-题-爬楼梯\" class=\"headerlink\" title=\"70 题 - 爬楼梯\"></a>70 题 - 爬楼梯</h1><blockquote>\n<p><a href=\"https://leetcode-cn.com/problems/climbing-stairs/\">283. 移动零</a>｜<strong>难度</strong>：<font color=\"green\">简单</font></p>\n</blockquote>\n<h2 id=\"题目讲解-2\"><a href=\"#题目讲解-2\" class=\"headerlink\" title=\"题目讲解\"></a>题目讲解</h2><p>假设你正在爬楼梯。需要 n 阶你才能到达楼顶。</p>\n<p>每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？</p>\n<p>注意：给定 n 是一个正整数。</p>\n<p>示例 1：</p>\n<blockquote>\n<p>输入： 2<br>输出： 2<br>解释： 有两种方法可以爬到楼顶。</p>\n<ol>\n<li>1 阶 + 1 阶</li>\n<li>2 阶</li>\n</ol>\n</blockquote>\n<p>示例 2：</p>\n<blockquote>\n<p>输入： 3<br>输出： 3<br>解释： 有三种方法可以爬到楼顶。</p>\n<ol>\n<li> 1 阶 + 1 阶 + 1 阶</li>\n<li> 1 阶 + 2 阶</li>\n<li> 2 阶 + 1 阶</li>\n</ol>\n</blockquote>\n<h3 id=\"题解重点\"><a href=\"#题解重点\" class=\"headerlink\" title=\"题解重点\"></a>题解重点</h3><p>其实题目本身并不难，在力扣（LeetCode）是属于“简单”级别的题目，但是如果没有思路，或者对这个题目完全不了解的话，一点头绪都没有也是正常的，这种题目也就是<strong>属于套路题</strong>。如果我们是不知道的话，我们自然会难到不知道怎么做。我们要是知道了的话，那就变得相当容易了。</p>\n<p>这里讲一下解题的思想：</p>\n<blockquote>\n<p><strong>首先我们解题时最大的误区是什么？</strong></p>\n<ul>\n<li>做题只做了一遍</li>\n<li>至少要做五遍</li>\n</ul>\n<p><strong>然后我们优化的思想是什么？</strong></p>\n<ul>\n<li>空间换时间</li>\n<li>升维思想（升级到二维）</li>\n</ul>\n<p><strong>看题时懵了怎么办？</strong></p>\n<ul>\n<li>首先我们能不能暴力破解？</li>\n<li>最基本的情况我们应该怎么解决？能否化繁为简？</li>\n</ul>\n<p><strong>破解所有问题的法则：</strong></p>\n<ul>\n<li><strong>找最近重复的子问题</strong></li>\n<li>为什么？因为写程序我们只能写<code>if</code>，<code>else</code>，<code>for</code>，<code>while</code>，<code>recursion</code>（递归）</li>\n<li>计算机是人类发明的，计算机肯定是没有人脑那么强的，它其实就是一个<strong>简单的重复式机器</strong></li>\n<li>那么计算机运行的程序也是同理，它是用重复的东西来解决问题的</li>\n<li>如果我们遇到算法题的时候，就是需要我们用程序去解决的问题，那<strong>问题的本身就是可重复的</strong></li>\n<li>无论是算法中的回述、分治、动态规划、递归等，全部都是在<strong>找重复性</strong>的原理</li>\n<li>所以重点都是“<strong>找规律</strong>”</li>\n</ul>\n</blockquote>\n<h3 id=\"深度分析题目：\"><a href=\"#深度分析题目：\" class=\"headerlink\" title=\"深度分析题目：\"></a>深度分析题目：</h3><p>首先我们使用<strong>化繁为简</strong>的思维来分析：</p>\n<p>要到达第一个台阶，我们只能爬 1 个台阶，所以只有一种方法的可能性，所以 n = 1 的时候，只有 1 种可能。</p>\n<p>那如果我们要到达第二个台阶，我们要不就是连续爬 2 次 1 个跨度，要不就是一次性爬两个台阶到达第二个台阶。所以有 2 种可能性。</p>\n<p>那如果是需要到达<strong>第三个台阶呢</strong>？</p>\n<blockquote>\n<p>这里有个小技巧，要到达第三个台阶我们可以换一种思维去想，如果我们还是像第一个和第二个台阶的方式去列出可以到达第三个台阶的所有可能性，那如果<code>n</code>很大的时候，我们只靠人的大脑去想，那真的是太费劲了。但是这里有一个很巧妙的思维方式。</p>\n<br/>\n返过来想，我们想到达第三个台阶，只有两种可能可以到达：\n\n<ol>\n<li>要不就是从第二个台阶爬 1 个台阶到达</li>\n<li>要不就是从第一个台阶爬 2 个台阶到达</li>\n</ol>\n<br/>\n那其实如果是第四个台阶是不是也是一样的？\n\n<ol>\n<li>要不就是从第三个台阶爬 1 个台阶到达</li>\n<li>要不就是从第二个台阶爬 2 个台阶到达</li>\n</ol>\n<br/>\n这里就有一个`规律`了。要到达第`n`个台阶我们需要知道：\n\n<ol>\n<li>到达第<code>n-1</code>的台阶有多少种可能</li>\n<li>到达第<code>n-2</code>的台阶有多少种可能</li>\n<li>然后这两个相加就是到达第<code>n</code>的台阶有多少种可能</li>\n</ol>\n</blockquote>\n<p>那其实这里就是老生常谈的<code>斐波拉次</code>数列:</p>\n<p>$f(n) = f(n-1) + f(n-2)$</p>\n<h2 id=\"解题思路-2\"><a href=\"#解题思路-2\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ol>\n<li><strong>斐波拉次（Fibonacci）</strong>- “傻递归“<ul>\n<li>直接使用递归循环使用斐波拉次公式即可</li>\n<li>但是时间复杂度就很高 - $O(2^n)$</li>\n</ul>\n</li>\n<li><strong>动态规划</strong><ul>\n<li>用上面讲到的原理，到达第<code>n</code>个台阶只需要：爬上 $n-1$ 台阶的方式数 + 爬上 $n - 2$ 台阶的方法数 = 爬上第 $n$ 个台阶的方式数</li>\n<li>所以得出的公式是 $dp[n] = dp[n-1] + dp[n-2]$</li>\n<li>同时需要初始化： $dp[0]=1$ 和 $dp[1] = 1$</li>\n<li>使用这种方式时间复杂度降到 $O(n)$</li>\n</ul>\n</li>\n<li>动态规划 2 - 只记录最后 3 个的方法量<ul>\n<li>与上面的动态规划的方法一样，但是这里我们只记录最后 3 个的台阶的爬楼方法数</li>\n<li>使用<code>f1</code>，<code>f2</code>，<code>f3</code>作为储存变量</li>\n<li>默认 $f1 = 1$ 和 $f2 = 2$ 即可</li>\n</ul>\n</li>\n<li>通项公式（Binet’s Formular ）<ul>\n<li>有观察数学规律的同学，或者数学比较好的同学，会发现本题是斐波那次数列，那么我们也可以用斐波那次的“通项公式”</li>\n<li>公式是：$F_n = \\frac{1}{\\sqrt{5}}[(\\frac{1+\\sqrt{5}}{2})^n - (\\frac{1-\\sqrt{5}}{2})^n]$</li>\n<li>时间复杂度：$O(logn)$</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"解题代码-2\"><a href=\"#解题代码-2\" class=\"headerlink\" title=\"解题代码\"></a>解题代码</h2><p><strong>「方法一」斐波那次</strong></p>\n<ul>\n<li>时间复杂度：$O(2^n)$</li>\n<li>空间复杂度：$O(1)$</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/**\n * @param &#123;number&#125; n\n * @return &#123;number&#125;\n */</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">climbStairs</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> n\n  <span class=\"token keyword\">return</span> <span class=\"token function\">climbStairs</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">climbStairs</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>「方法二」动态规划</strong></p>\n<ul>\n<li>时间复杂度：$O(n)$</li>\n<li>空间复杂度：$O(n)$</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/**\n * @param &#123;number&#125; n\n * @return &#123;number&#125;\n */</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">climbStairs</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> dp <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n  dp<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> dp<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>「方法三」动态规划 2</strong></p>\n<ul>\n<li>时间复杂度：$O(n)$</li>\n<li>空间复杂度：$O(1)$</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/**\n * @param &#123;number&#125; n\n * @return &#123;number&#125;\n */</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">climbStairs</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> n\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">let</span> f1 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    f2 <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n    f3\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    f3 <span class=\"token operator\">=</span> f1 <span class=\"token operator\">+</span> f2\n    f1 <span class=\"token operator\">=</span> f2\n    f2 <span class=\"token operator\">=</span> f3\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> f3\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>「方法四」通项公式</strong></p>\n<ul>\n<li>时间复杂度：$O(logn)$</li>\n<li>空间复杂度：$O(1)$</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/**\n * @param &#123;number&#125; n\n * @return &#123;number&#125;\n */</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">climbStairs</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> sqrt_5 <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> fib_n <span class=\"token operator\">=</span>\n    Math<span class=\"token punctuation\">.</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> sqrt_5<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">-</span> sqrt_5<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">round</span><span class=\"token punctuation\">(</span>fib_n <span class=\"token operator\">/</span> sqrt_5<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"题解对比与分析-2\"><a href=\"#题解对比与分析-2\" class=\"headerlink\" title=\"题解对比与分析\"></a>题解对比与分析</h2><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>执行时间（毫秒）</th>\n<th>内存消耗</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>「方法一」斐波那次</td>\n<td>超出时间限制</td>\n<td>N/A</td>\n</tr>\n<tr>\n<td>「方法二」动态规划</td>\n<td>68 ms</td>\n<td>32.4 MB</td>\n</tr>\n<tr>\n<td>「方法三」动态规划 2</td>\n<td>53 ms</td>\n<td>32.3 MB</td>\n</tr>\n<tr>\n<td>「方法三」通项公式</td>\n<td>67 ms</td>\n<td>32.4 MB</td>\n</tr>\n</tbody></table>\n<p><strong>分析一下</strong></p>\n<ul>\n<li>按照时间复杂度来说，应该“<strong>通项公式</strong>”是性能最优的，但是力扣的执行时间不是很靠谱，这一点我在上面也说到，就不多解释了。</li>\n<li>所以最优解还是第三种方法“<strong>通项公式</strong>”</li>\n<li>接着就是“<strong>动态规划 2</strong>”，因为只储存了 3 个变量，第二种方法需要用到数组。在空间复杂度上就占了优势。</li>\n<li>而最后输一下傻瓜式的斐波那次递归，这种方法还没有执行完就已经被淘汰了。时间复杂度过高。</li>\n</ul>\n<h1 id=\"推荐专栏\"><a href=\"#推荐专栏\" class=\"headerlink\" title=\"推荐专栏\"></a>推荐专栏</h1><p>小伙伴们可以<strong>查看或者订阅相关的专栏</strong>，从而集中阅读相关知识的文章哦。</p>\n<ul>\n<li><p>📖 <a href=\"https://blog.csdn.net/tridiamond6/category_10036942.html\">《数据结构与算法》</a> — 到了如今，如果想成为一个高级开发工程师或者进入大厂，不论岗位是前端、后端还是 AI，算法都是重中之重。也无论我们需要进入的公司的岗位是否最后是做算法工程师，前提面试就需要考算法。</p>\n</li>\n<li><p>📖 <a href=\"https://blog.csdn.net/tridiamond6/category_9782493.html\">《FCC 前端集训营》</a> — 根据 FreeCodeCamp 的学习课程，一起深入浅出学习前端。稳固前端知识，一起在 FreeCodeCamp 获得证书</p>\n</li>\n<li><p>📖 <a href=\"https://blog.csdn.net/tridiamond6/category_9782493.html\">《前端星球》</a> — 以实战为线索，深入浅出前端多维度的知识点。内含有多方面的前端知识文章，带领不懂前端的童鞋一起学习前端，在前端开发路上童鞋一起燃起心中那团火 🔥</p>\n</li>\n</ul>\n","feature":null,"text":"练题法则5-10 分钟读题与思考 不要纠结没有思路就直接看题解； 不要死磕觉得自己很失败，怎么我们就想不出来； 基本上这些算法题，让我们自己想出来是不可能的； 拿跳表的来说，如果我们能从 0-1 把它想出来，那我们就可以拿到图灵奖了； 所以记住！无思路就直接看题解，无思路就直接看...","link":"","raw":"---\ntitle: 力扣实战之移动零、盛最多的水、爬楼梯\ndate: 2020-06-24 22:03:17\ntags:\n  - LeetCode\ncategories:\n  - Algorithm\ncover: https://img-blog.csdnimg.cn/20200716163259937.jpg\n---\n\n# 练题法则\n\n**5-10 分钟读题与思考**\n\n- **不要纠结**没有思路就直接看题解；\n- **不要死磕**觉得自己很失败，怎么我们就想不出来；\n- 基本上这些算法题，让我们自己想出来是不可能的；\n- 拿跳表的来说，如果我们能从 0-1 把它想出来，那我们就可以拿到图灵奖了；\n- 所以记住！**无思路就直接看题解，无思路就直接看题解，无思路就直接看题解**！\n- 我们只需要**知道并且能运用即可！**\n\n**有思路**\n\n- 自己开始写代码，没有，就马上看题解！\n  **默写背题，熟练**\n- 做完题目后，我们需要记住这种题的思路和有**N 种解决办法**；\n- 重复再**重复的默写，**直到自己有深刻的影响；\n\n**最后开始自己写（闭卷）**\n\n- 到了这里如果我们还需要看别人代码，那就要回去背题；\n- 能到达这个阶段基本这种题你已经开始熟悉的，接下来就是反复练习；\n\n## 在哪里练题？\n\n那肯定是[力扣](https://leetcode-cn.com/)了！没有账号的小伙伴，马上就去注册个账号开始日复一日的练习吧！～\n\n![](https://img-blog.csdnimg.cn/20200613135642518.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70)\n\n# 283 题 - 移动零\n\n> [283. 移动零](https://leetcode-cn.com/problems/move-zeroes/)｜**难度**：<font color=\"green\">简单</font>\n\n## 题目讲解\n\n给定一个数组 `nums`，编写一个函数将所有 `0` 移动到数组的末尾，同时保持非零元素的相对顺序。\n\n示例：\n\n```\n输入: [0,1,0,3,12]\n输出: [1,3,12,0,0]\n```\n\n**说明**:\n\n1. 必须在原数组上操作，不能拷贝额外的数组。\n2. 尽量减少操作次数。\n\n**这里需要注意的重点：**\n\n1. 所有 `0` 移动到数组的末尾；\n2. 保持非零元素的相对顺序；\n3. 必须在原数组上操作，不能拷贝额外的数组；\n\n## 解题思路\n\n> 思考题解时，使用**MECE 原则** — 每一个思路都相对独立的思维，然后想到完全穷尽。首先不要管附加条件，先把有可能解决这个问题的思路都想出来，再评估哪一个办法是最优解。面试的时候也是一样，说出你所有可以想到的思路，然后分别讲出各自的优点与缺点，最后提出最优答案。\n\n1. **统计 0 的个数**\n   - 循环数组找到 0 的位置，遇到 0 就为 0 的个数加一；\n   - 遇到不是 0 的时候，把非 0 的元素值与 0 的元素交换即可；\n2. **开新数组**\n   - 给一个指针`i`从数组的头部开始递增；\n   - 给一个指针`j`从数组的尾部开始递减（也就是原数组的总长度）；\n   - 遇到零就往`j`指针的位置放，然后`j--`；\n   - 遇到非零就往`i`指针的位置放，然后`i++`；\n   - **缺点：**内存使用会高；\n   - **不符合条件：**必须在原数组上操作，所以可以实现但是不符合条件；\n3. **双指针交换**\n   - 给两个指针`i`和`j`，并且默认都从 0 开始；\n   - `i`指向的是当前位置；\n   - `j`指针会一直移动，直到找到一个非零元素，然后与`i`位置的值交换；\n   - 如果`j`的位置与`i`不是一致的话，就可以给`j`的值换成 0；\n4. **双指针替换后清零**\n   - 这个与**第三种**方法一致，也是双指针；\n   - 唯一的区别是不在`i`指针扫描的时候替换零；\n   - 而是在替换完毕所有非零元素后，把剩余的全部位数都改为 0；\n\n## 解题代码\n\n**「方法一」** - 统计 0 的个数：\n\n- 时间复杂度：$O(n)$ - N 个元素就需要遍历 N 次\n- 空间复杂度：$O(1)$ - 只对原数组进行替换操作\n\n```javascript\n/**\n * @param {number[]} nums\n * @return {void} Do not return anything, modify nums in-place instead.\n */\nvar moveZeroes = function (nums) {\n  let zeroCount = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] == 0) {\n      zeroCount += 1\n    } else if (zeroCount > 0) {\n      nums[i - zeroCount] = nums[i]\n      nums[i] = 0\n    }\n  }\n}\n```\n\n**「方法二」** - 双指针交换：\n\n![](https://img-blog.csdnimg.cn/20200624213737392.gif#pic_center)\n\n- 时间复杂度：$O(n)$ - N 个元素就需要遍历 N 次\n- 空间复杂度：$O(1)$ - 只对原数组进行替换操作\n\n```javascript\n/**\n * @param {number[]} nums\n * @return {void} Do not return anything, modify nums in-place instead.\n */\nvar moveZeroes = function (nums) {\n  let j = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] !== 0) {\n      nums[j] = nums[i]\n      if (j !== i) {\n        nums[i] = 0\n      }\n      j++\n    }\n  }\n}\n```\n\n**「方法三」** - 双指针替换后清零：\n\n![](https://img-blog.csdnimg.cn/20200624213755998.gif#pic_center)\n\n- 时间复杂度：$O(n)$ - N 个元素就需要遍历 N 次，加上最后清零是走了`n减非零的个数`，那就是`O(n+n-i)`，总的来说还是`O(n)`\n- 空间复杂度：$O(1)$ - 只对原数组进行替换操作\n\n```javascript\n/**\n * @param {number[]} nums\n * @return {void} Do not return anything, modify nums in-place instead.\n */\nvar moveZeroes = function (nums) {\n  var j = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] != 0) {\n      nums[j] = nums[i]\n      j++\n    }\n  }\n\n  for (let k = j; k < nums.length; k++) {\n    nums[k] = 0\n  }\n}\n```\n\n## 边界测试用例\n\n> [0,1,0,3,12][1,2] > [0,0]\n\n## 题解对比与分析\n\n> **注意**：以下数据都是在**力扣**中提交后返回的结果，每次提交都有可能不一致。所以相近的方案输出的结果有所差异也是正常的，最终**最优方案要通过分析代码来确定**，**不能只以力扣输出的数据为准，只能供于我们作为参考**。\n\n| 方法                         | 执行时间             | 内存消耗 |\n| ---------------------------- | -------------------- | -------- |\n| 「方法一」- 统计 0 的个数    | 96 ms（战胜 17.82%） | 37.1 MB  |\n| 「方法二」- 双指针交换       | 72 ms（战胜 87.23%） | 37.2 MB  |\n| 「方法三」- 双指针替换后清零 | 76 ms（战胜 73.98%） | 37.2 MB  |\n\n**分析一下：**\n\n- 第一种方法是通过统计 0 出现的次数来定位到需要替换 0 的所在位置，里面涉及一个`i - zeroCount`的运算，所以相对其他方法来说运行时间会更长一些；\n- 第二个方法是通过两个指针一起运行，一个固定在 0 元素，一个一直走找到非 0 元素，最后做一个交换，这种方法没有涉及运算，同时也是一个循环就可以完成，相对来说是最优解；\n- 第三种方法也是用了双指针，与第二种方法的唯一区别就是先替换掉所有 0 的元素，最后把剩余的元素全部一次性替换成 0。可读性来说，个人觉得更容易懂，但是时间和空间复杂度和第二种方法是一致的。\n\n![](https://img-blog.csdnimg.cn/20200613135642518.png)\n\n# 11 题 - 盛最多水的容器\n\n> [283. 盛最多水的容器](https://leetcode-cn.com/problems/container-with-most-water/)｜**难度**：<font color=\"orange\">中等</font>\n\n## 题目讲解\n\n给你 n 个非负整数 a1，a2，...，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0)。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。\n\n> 说明：你不能倾斜容器，且 n 的值至少为 2。\n\n![](https://img-blog.csdnimg.cn/20200624214839464.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70#pic_center)\n\n图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。\n\n**示例：**\n\n> 输入：[1,8,6,2,5,4,8,3,7]\n> 输出：49\n\n**题目重点：**\n\n1. 首先我们的目标是挑选两条柱子，从而让两个柱子之前可以得出最大的面积（面积越大自然可容纳的水就越多）；\n2. 挑选最长的两个柱子不等于拥有最大的面积，因为它们之间的距离也是决定空间的一个维度；\n3. 所以重点是找到高度和宽度比例最大的一对柱子，从而得出最大面积；\n4. 注意在运算面积时，我们只能用一对柱子中最短的一条作为高度，因为水只能填满到最短的那条柱子的高度；\n5. 面积运算公式： `高度 x 宽度 = 面积`\n\n## 解题思路\n\n1. **枚举** —— 暴力解法\n\n   - 遍历左边和右边，找出所有面积；\n   - 列出所有柱子的组合；\n   - 算出所有组合各自的面积；\n   - 最后输出最大的面积的一组；\n   - **缺点：**遍历次数过高，所以时间复杂度会相对偏高\n   - **复杂度**：时间复杂度 $O(n^2)$、空间复杂度 $O(1)$\n\n2. **双指针**\n\n   - 左右两边都往中间移动；\n\n   - 需要移动左右两头的问题都可以考虑双指针；\n\n   - 相同情况下两遍距离越远越好；\n\n   - 区域受限于较短边的高度；\n\n   - 所以让较矮的那边的指针往内移动；\n\n   - 一直以上面的规则移动知道两个指针重合；\n\n## 解题代码\n\n**「方法一」** - 枚举（暴力破解）：\n\n- 时间复杂度：$O(n^2)$ - 双循环，所以总计循环了 N^2。\n- 空间复杂度：$O(1)$\n\n```javascript\n/**\n * @param {number[]} height\n * @return {number}\n */\nvar maxArea = function (height) {\n  let max = 0\n  for (let i = 0; i < height.length - 1; i++) {\n    for (let j = i + 1; j < height.length; j++) {\n      let area = (j - i) * Math.min(height[i], height[j])\n      max = Math.max(max, area)\n    }\n  }\n  return max\n}\n```\n\n**「方法二」** - 双指针：\n\n- 时间复杂度：$O(n)$ - 双指针总计最多遍历整个数组一次。\n- 空间复杂度：$O(1)$ - 只需要额外的常数级别的空间。\n\n```javascript\n/**\n * @param {number[]} height\n * @return {number}\n */\nvar maxArea = function (height) {\n  let max = 0\n\n  for (let i = 0, j = height.length - 1; i < j; ) {\n    let minHeight = height[i] < height[j] ? height[i++] : height[j--]\n    let area = (j - i + 1) * minHeight\n    max = Math.max(max, area)\n  }\n\n  return max\n}\n```\n\n## 题解对比与分析\n\n| 方法             | 执行时间（毫秒）      | 内存消耗 |\n| ---------------- | --------------------- | -------- |\n| 枚举（暴力破解） | 984 ms （战胜 9.99%） | 35.9 MB  |\n| 双指针           | 56 ms（战胜 99.88%）  | 36 MB    |\n\n**分析一下**\n\n- 通过使用第二种方法，我们从$O(n^2)$的时间复杂度降到$O(n)$，总的执行时间大概是**快了 17 倍**。\n\n![](https://img-blog.csdnimg.cn/20200613135642518.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70)\n\n# 70 题 - 爬楼梯\n\n> [283. 移动零](https://leetcode-cn.com/problems/climbing-stairs/)｜**难度**：<font color=\"green\">简单</font>\n\n## 题目讲解\n\n假设你正在爬楼梯。需要 n 阶你才能到达楼顶。\n\n每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？\n\n注意：给定 n 是一个正整数。\n\n示例 1：\n\n> 输入： 2\n> 输出： 2\n> 解释： 有两种方法可以爬到楼顶。\n>\n> 1. 1 阶 + 1 阶\n> 2. 2 阶\n\n示例 2：\n\n> 输入： 3\n> 输出： 3\n> 解释： 有三种方法可以爬到楼顶。\n>\n> 1.  1 阶 + 1 阶 + 1 阶\n> 2.  1 阶 + 2 阶\n> 3.  2 阶 + 1 阶\n\n### 题解重点\n\n其实题目本身并不难，在力扣（LeetCode）是属于“简单”级别的题目，但是如果没有思路，或者对这个题目完全不了解的话，一点头绪都没有也是正常的，这种题目也就是**属于套路题**。如果我们是不知道的话，我们自然会难到不知道怎么做。我们要是知道了的话，那就变得相当容易了。\n\n这里讲一下解题的思想：\n\n> **首先我们解题时最大的误区是什么？**\n>\n> - 做题只做了一遍\n> - 至少要做五遍\n>\n> **然后我们优化的思想是什么？**\n>\n> - 空间换时间\n> - 升维思想（升级到二维）\n>\n> **看题时懵了怎么办？**\n>\n> - 首先我们能不能暴力破解？\n> - 最基本的情况我们应该怎么解决？能否化繁为简？\n>\n> **破解所有问题的法则：**\n>\n> - **找最近重复的子问题**\n> - 为什么？因为写程序我们只能写`if`，`else`，`for`，`while`，`recursion`（递归）\n> - 计算机是人类发明的，计算机肯定是没有人脑那么强的，它其实就是一个**简单的重复式机器**\n> - 那么计算机运行的程序也是同理，它是用重复的东西来解决问题的\n> - 如果我们遇到算法题的时候，就是需要我们用程序去解决的问题，那**问题的本身就是可重复的**\n> - 无论是算法中的回述、分治、动态规划、递归等，全部都是在**找重复性**的原理\n> - 所以重点都是“**找规律**”\n\n### 深度分析题目：\n\n首先我们使用**化繁为简**的思维来分析：\n\n要到达第一个台阶，我们只能爬 1 个台阶，所以只有一种方法的可能性，所以 n = 1 的时候，只有 1 种可能。\n\n那如果我们要到达第二个台阶，我们要不就是连续爬 2 次 1 个跨度，要不就是一次性爬两个台阶到达第二个台阶。所以有 2 种可能性。\n\n那如果是需要到达**第三个台阶呢**？\n\n> 这里有个小技巧，要到达第三个台阶我们可以换一种思维去想，如果我们还是像第一个和第二个台阶的方式去列出可以到达第三个台阶的所有可能性，那如果`n`很大的时候，我们只靠人的大脑去想，那真的是太费劲了。但是这里有一个很巧妙的思维方式。\n>\n> <br/>\n> 返过来想，我们想到达第三个台阶，只有两种可能可以到达：\n>\n> 1. 要不就是从第二个台阶爬 1 个台阶到达\n> 2. 要不就是从第一个台阶爬 2 个台阶到达\n>\n> <br/>\n> 那其实如果是第四个台阶是不是也是一样的？\n>\n> 1. 要不就是从第三个台阶爬 1 个台阶到达\n> 2. 要不就是从第二个台阶爬 2 个台阶到达\n>\n> <br/>\n> 这里就有一个`规律`了。要到达第`n`个台阶我们需要知道：\n>\n> 1. 到达第`n-1`的台阶有多少种可能\n> 2. 到达第`n-2`的台阶有多少种可能\n> 3. 然后这两个相加就是到达第`n`的台阶有多少种可能\n\n那其实这里就是老生常谈的`斐波拉次`数列:\n\n$f(n) = f(n-1) + f(n-2)$\n\n## 解题思路\n\n1. **斐波拉次（Fibonacci）**- “傻递归“\n   - 直接使用递归循环使用斐波拉次公式即可\n   - 但是时间复杂度就很高 - $O(2^n)$\n2. **动态规划**\n   - 用上面讲到的原理，到达第`n`个台阶只需要：爬上 $n-1$ 台阶的方式数 + 爬上 $n - 2$ 台阶的方法数 = 爬上第 $n$ 个台阶的方式数\n   - 所以得出的公式是 $dp[n] = dp[n-1] + dp[n-2]$\n   - 同时需要初始化： $dp[0]=1$ 和 $dp[1] = 1$\n   - 使用这种方式时间复杂度降到 $O(n)$\n3. 动态规划 2 - 只记录最后 3 个的方法量\n   - 与上面的动态规划的方法一样，但是这里我们只记录最后 3 个的台阶的爬楼方法数\n   - 使用`f1`，`f2`，`f3`作为储存变量\n   - 默认 $f1 = 1$ 和 $f2 = 2$ 即可\n4. 通项公式（Binet's Formular ）\n   - 有观察数学规律的同学，或者数学比较好的同学，会发现本题是斐波那次数列，那么我们也可以用斐波那次的“通项公式”\n   - 公式是：$F_n = \\frac{1}{\\sqrt{5}}[(\\frac{1+\\sqrt{5}}{2})^n - (\\frac{1-\\sqrt{5}}{2})^n]$\n   - 时间复杂度：$O(logn)$\n\n## 解题代码\n\n**「方法一」斐波那次**\n\n- 时间复杂度：$O(2^n)$\n- 空间复杂度：$O(1)$\n\n```javascript\n/**\n * @param {number} n\n * @return {number}\n */\nvar climbStairs = function (n) {\n  if (n <= 2) return n\n  return climbStairs(n - 1) + climbStairs(n - 2)\n}\n```\n\n**「方法二」动态规划**\n\n- 时间复杂度：$O(n)$\n- 空间复杂度：$O(n)$\n\n```javascript\n/**\n * @param {number} n\n * @return {number}\n */\nvar climbStairs = function (n) {\n  const dp = []\n  dp[0] = 1\n  dp[1] = 1\n  for (let i = 2; i <= n; i++) {\n    dp[i] = dp[i - 1] + dp[i - 2]\n  }\n  return dp[n]\n}\n```\n\n**「方法三」动态规划 2**\n\n- 时间复杂度：$O(n)$\n- 空间复杂度：$O(1)$\n\n```javascript\n/**\n * @param {number} n\n * @return {number}\n */\nvar climbStairs = function (n) {\n  if (n <= 2) {\n    return n\n  }\n  let f1 = 1,\n    f2 = 2,\n    f3\n  for (let i = 3; i <= n; i++) {\n    f3 = f1 + f2\n    f1 = f2\n    f2 = f3\n  }\n  return f3\n}\n```\n\n**「方法四」通项公式**\n\n- 时间复杂度：$O(logn)$\n- 空间复杂度：$O(1)$\n\n```javascript\n/**\n * @param {number} n\n * @return {number}\n */\nvar climbStairs = function (n) {\n  const sqrt_5 = Math.sqrt(5)\n  const fib_n =\n    Math.pow((1 + sqrt_5) / 2, n + 1) - Math.pow((1 - sqrt_5) / 2, n + 1)\n  return Math.round(fib_n / sqrt_5)\n}\n```\n\n## 题解对比与分析\n\n| 方法                 | 执行时间（毫秒） | 内存消耗 |\n| -------------------- | ---------------- | -------- |\n| 「方法一」斐波那次   | 超出时间限制     | N/A      |\n| 「方法二」动态规划   | 68 ms            | 32.4 MB  |\n| 「方法三」动态规划 2 | 53 ms            | 32.3 MB  |\n| 「方法三」通项公式   | 67 ms            | 32.4 MB  |\n\n**分析一下**\n\n- 按照时间复杂度来说，应该“**通项公式**”是性能最优的，但是力扣的执行时间不是很靠谱，这一点我在上面也说到，就不多解释了。\n- 所以最优解还是第三种方法“**通项公式**”\n- 接着就是“**动态规划 2**”，因为只储存了 3 个变量，第二种方法需要用到数组。在空间复杂度上就占了优势。\n- 而最后输一下傻瓜式的斐波那次递归，这种方法还没有执行完就已经被淘汰了。时间复杂度过高。\n\n# 推荐专栏\n\n小伙伴们可以**查看或者订阅相关的专栏**，从而集中阅读相关知识的文章哦。\n\n- 📖 [《数据结构与算法》](https://blog.csdn.net/tridiamond6/category_10036942.html) --- 到了如今，如果想成为一个高级开发工程师或者进入大厂，不论岗位是前端、后端还是 AI，算法都是重中之重。也无论我们需要进入的公司的岗位是否最后是做算法工程师，前提面试就需要考算法。\n\n- 📖 [《FCC 前端集训营》](https://blog.csdn.net/tridiamond6/category_9782493.html) --- 根据 FreeCodeCamp 的学习课程，一起深入浅出学习前端。稳固前端知识，一起在 FreeCodeCamp 获得证书\n\n- 📖 [《前端星球》](https://blog.csdn.net/tridiamond6/category_9782493.html) --- 以实战为线索，深入浅出前端多维度的知识点。内含有多方面的前端知识文章，带领不懂前端的童鞋一起学习前端，在前端开发路上童鞋一起燃起心中那团火 🔥\n","photos":[],"count_time":{"symbolsCount":"8.5k","symbolsTime":"8 mins."},"categories":[{"name":"Algorithm","slug":"Algorithm","count":4,"path":"api/categories/Algorithm.json"}],"tags":[{"name":"LeetCode","slug":"LeetCode","count":1,"path":"api/tags/LeetCode.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%BB%83%E9%A2%98%E6%B3%95%E5%88%99\"><span class=\"toc-text\">练题法则</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9C%A8%E5%93%AA%E9%87%8C%E7%BB%83%E9%A2%98%EF%BC%9F\"><span class=\"toc-text\">在哪里练题？</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#283-%E9%A2%98-%E7%A7%BB%E5%8A%A8%E9%9B%B6\"><span class=\"toc-text\">283 题 - 移动零</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE%E8%AE%B2%E8%A7%A3\"><span class=\"toc-text\">题目讲解</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF\"><span class=\"toc-text\">解题思路</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E9%A2%98%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">解题代码</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BE%B9%E7%95%8C%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B\"><span class=\"toc-text\">边界测试用例</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E8%A7%A3%E5%AF%B9%E6%AF%94%E4%B8%8E%E5%88%86%E6%9E%90\"><span class=\"toc-text\">题解对比与分析</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#11-%E9%A2%98-%E7%9B%9B%E6%9C%80%E5%A4%9A%E6%B0%B4%E7%9A%84%E5%AE%B9%E5%99%A8\"><span class=\"toc-text\">11 题 - 盛最多水的容器</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE%E8%AE%B2%E8%A7%A3-1\"><span class=\"toc-text\">题目讲解</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF-1\"><span class=\"toc-text\">解题思路</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E9%A2%98%E4%BB%A3%E7%A0%81-1\"><span class=\"toc-text\">解题代码</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E8%A7%A3%E5%AF%B9%E6%AF%94%E4%B8%8E%E5%88%86%E6%9E%90-1\"><span class=\"toc-text\">题解对比与分析</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#70-%E9%A2%98-%E7%88%AC%E6%A5%BC%E6%A2%AF\"><span class=\"toc-text\">70 题 - 爬楼梯</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE%E8%AE%B2%E8%A7%A3-2\"><span class=\"toc-text\">题目讲解</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%A2%98%E8%A7%A3%E9%87%8D%E7%82%B9\"><span class=\"toc-text\">题解重点</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B7%B1%E5%BA%A6%E5%88%86%E6%9E%90%E9%A2%98%E7%9B%AE%EF%BC%9A\"><span class=\"toc-text\">深度分析题目：</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF-2\"><span class=\"toc-text\">解题思路</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E9%A2%98%E4%BB%A3%E7%A0%81-2\"><span class=\"toc-text\">解题代码</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E8%A7%A3%E5%AF%B9%E6%AF%94%E4%B8%8E%E5%88%86%E6%9E%90-2\"><span class=\"toc-text\">题解对比与分析</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%8E%A8%E8%8D%90%E4%B8%93%E6%A0%8F\"><span class=\"toc-text\">推荐专栏</span></a></li></ol>","author":{"name":"三钻","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":""},"mapped":true,"prev_post":{"title":"44关学习CSS与CSS3基础「二」","uid":"bf711582d656c68e5bb5b6ce2c895348","slug":"frontend/fcc-css3-basics-2","date":"2020-07-11T16:19:24.000Z","updated":"2021-03-30T13:45:00.061Z","comments":true,"path":"api/articles/frontend/fcc-css3-basics-2.json","keywords":null,"cover":"https://img-blog.csdnimg.cn/20200716163610402.jpg","text":"我有一段时间没有更新 FCC 前端教程了，这一周就继续写完 CSS 与 CSS3 基础的教程。最近工作和生活都比较繁忙所以文章更新也受到了一定的影响。不过技术文章写作再忙也不会放弃的。我会继续努力坚持着一周一篇文章的进度，继续为大家带来我学习到的知识。让我们一起继续终身学习吧！ ...","link":"","photos":[],"count_time":{"symbolsCount":"15k","symbolsTime":"13 mins."},"categories":[{"name":"FrontEnd","slug":"FrontEnd","count":9,"path":"api/categories/FrontEnd.json"}],"tags":[{"name":"HTML&CSS","slug":"HTML-CSS","count":4,"path":"api/tags/HTML-CSS.json"},{"name":"Free Code Camp","slug":"Free-Code-Camp","count":3,"path":"api/tags/Free-Code-Camp.json"}],"author":{"name":"三钻","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":""}},"next_post":{"title":"用动图解说数组、链表、跳表原理与实现","uid":"340fc57e8e2087786aea08a4e455e6c0","slug":"algorithm/algorithm-array-linked-list-jump-list","date":"2020-06-14T09:50:24.000Z","updated":"2021-03-30T13:45:00.057Z","comments":true,"path":"api/articles/algorithm/algorithm-array-linked-list-jump-list.json","keywords":null,"cover":"https://img-blog.csdnimg.cn/20200716162827608.jpg","text":"「初」前言在学习数据结构与算法的过程中，感觉真的是一入算法深似海，但是越学越觉得有趣。不过我们会发现在终身学习的过程中，我们都是越学越多，不知的也越来越多，但是更渴望认知更多的知识，越是对知识感兴趣。 本期讲说最常见的数据结构类型分别有数组、链表、跳表。这一期我们一起来了解它们的...","link":"","photos":[],"count_time":{"symbolsCount":"4.5k","symbolsTime":"4 mins."},"categories":[{"name":"Algorithm","slug":"Algorithm","count":4,"path":"api/categories/Algorithm.json"}],"tags":[{"name":"Linked List","slug":"Linked-List","count":1,"path":"api/tags/Linked-List.json"},{"name":"Array","slug":"Array","count":1,"path":"api/tags/Array.json"},{"name":"Jump List","slug":"Jump-List","count":1,"path":"api/tags/Jump-List.json"}],"author":{"name":"三钻","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":""}}}